---
description: MANDATORY component design rules that AI agents MUST follow for buttons, forms, cards, navigation, and all interactive elements with specific patterns and implementations.
alwaysApply: true
---

# üß© Component Design Rules (MANDATORY)

## ‚ö†Ô∏è CRITICAL: AI AGENTS MUST FOLLOW THESE COMPONENT RULES

**These component design specifications are MANDATORY for all implementations. Deviating from these rules is NOT ALLOWED.**

---

## üé® Icon System (MANDATORY)

### Icon Selection Framework (MANDATORY)
Based on the mobile implementation strategy, use the appropriate icon library for each use case:

- **Navigation menus**: Heroicons for universal recognition
- **Action buttons**: Heroicons for customization and accessibility
- **Status indicators**: Heroicons for emotional context and universal meaning
- **Complex features**: Tabler for consistency and performance
- **Brand elements**: Font Awesome Free for full control and scalability
- **Quick prototypes**: Heroicons for fast implementation

### Installation & Import Pattern
```bash
# See @project-setup.mdc for complete dependency installation
# Primary icon library: @heroicons/react (installed with other dependencies)
# Additional libraries: @tabler/icons-react, @fortawesome/fontawesome-free
```

```jsx
// Heroicons Import Pattern - MANDATORY (Primary)
import { 
  HomeIcon, 
  UserIcon, 
  CogIcon, 
  ArrowRightIcon,
  ArrowPathIcon,
  Bars3Icon,
  BellIcon,
  ChevronDownIcon,
  QuestionMarkCircleIcon,
  ArrowRightOnRectangleIcon
} from '@heroicons/react/24/outline';

// Tabler Icons Import Pattern - MANDATORY (Complex features)
import { 
  IconChartBar,
  IconDatabase,
  IconSettings,
  IconUsers
} from '@tabler/icons-react';

// Font Awesome Import Pattern - MANDATORY (Brand elements)
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBrand, faCustomIcon } from '@fortawesome/free-solid-svg-icons';

// Usage Examples - MANDATORY
<HomeIcon className="h-5 w-5 text-gray-600" />
<UserIcon className="h-4 w-4 text-primary-600" />
<CogIcon className="h-6 w-6" />

// Navigation Pattern - MANDATORY
const navigationItems = [
  {
    name: 'Dashboard',
    href: '/dashboard',
    icon: HomeIcon, // Store component directly
    current: false
  }
];

// Rendering Pattern - MANDATORY
{navigationItems.map((item) => (
  <item.icon className="h-5 w-5 flex-shrink-0 mr-3" />
))}
```

### Icon System Rules (MANDATORY)
- **Primary Library**: Use @heroicons/react (24/outline variant) for navigation, actions, and status
- **Complex Features**: Use @tabler/icons-react for advanced functionality and consistency
- **Brand Elements**: Use @fortawesome/fontawesome-free for custom brand icons and full control
- **Import Strategy**: Import only used icons, tree-shaking optimization
- **Sizing**: h-4 w-4 (small), h-5 w-5 (medium), h-6 w-6 (large), h-8 w-8 (extra large)
- **Colors**: text-gray-400 (default), text-primary-600 (active), text-gray-500 (hover), text-red-600 (error), text-green-600 (success), text-orange-600 (warning)
- **Spacing**: mr-2 (buttons), mr-3 (lists), no margin (standalone)

### Brand Color Usage Rules (MANDATORY)
- **Primary Brand Color**: ALWAYS use primary-* colors (primary-600, primary-700, etc.) for brand elements
- **NO Purple Colors**: NEVER use purple-* colors unless specifically required for semantic purposes
- **Semantic Colors**: Use red-* (error), green-* (success), orange-* (warning), blue-* (info) for semantic states only
- **Gradients**: Use primary color variations (e.g., from-primary-600 to-primary-700) instead of mixing with other colors
- **Brand Consistency**: All interactive elements, buttons, and brand components MUST use primary color palette

---

## üîò Button System (MANDATORY)

### Button Component (MUST USE)
```jsx
// Button Component - MANDATORY PATTERN
import { ArrowPathIcon } from '@heroicons/react/24/outline';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  disabled = false, 
  loading = false,
  fullWidth = false,
  type = 'button',
  onClick,
  className = '',
  ...props 
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded transition-all duration-200 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed';
  
  const sizeClasses = {
    sm: 'px-3 py-1.5 text-xs h-8',
    md: 'px-4 py-2 text-sm h-10',
    lg: 'px-6 py-3 text-base h-12',
    xl: 'px-8 py-4 text-lg h-14'
  };

  const variantClasses = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 shadow-sm hover:shadow-md',
    primaryOutline: 'border border-primary-600 text-primary-600 hover:bg-primary-50 bg-transparent',
    secondary: 'bg-gray-600 text-white hover:bg-gray-700 shadow-sm hover:shadow-md',
    secondaryOutline: 'border border-gray-600 text-gray-600 hover:bg-gray-50 bg-transparent',
    success: 'bg-green-600 text-white hover:bg-green-700 shadow-sm hover:shadow-md',
    danger: 'bg-red-600 text-white hover:bg-red-700 shadow-sm hover:shadow-md',
    warning: 'bg-orange-600 text-white hover:bg-orange-700 shadow-sm hover:shadow-md',
    info: 'bg-blue-600 text-white hover:bg-blue-700 shadow-sm hover:shadow-md',
    ghost: 'text-gray-700 hover:bg-gray-100 bg-transparent',
    link: 'text-primary-600 hover:text-primary-700 underline bg-transparent p-0 h-auto',
    light: 'bg-white text-primary-600 hover:bg-gray-50 shadow-sm hover:shadow-md'
  };

  return (
    <button
      type={type}
      className={`${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]} ${fullWidth ? 'w-full' : ''} ${className}`}
      disabled={disabled || loading}
      onClick={onClick}
      {...props}
    >
      {loading ? (
        <div className="flex items-center justify-center">
          <ArrowPathIcon className="h-4 w-4 animate-spin mr-2" />
          Loading...
        </div>
      ) : (
        children
      )}
    </button>
  );
};
```

### Button Usage Patterns (MANDATORY)
```jsx
// Primary Actions - MANDATORY
<Button variant="primary" size="lg">Create Project</Button>

// Secondary Actions - MANDATORY
<Button variant="primaryOutline" size="md">Save Draft</Button>

// Destructive Actions - MANDATORY
<Button variant="danger" size="md">Delete Project</Button>

// Loading States - MANDATORY
<Button loading={true}>Processing...</Button>

// Full Width - MANDATORY
<Button fullWidth>Submit Form</Button>
```

### Button Rules (MANDATORY)
- **Variants**: primary, primaryOutline, secondary, secondaryOutline, success, danger, warning, info, ghost, link, light
- **Sizes**: sm (h-8), md (h-10), lg (h-12), xl (h-14)
- **Selection Logic**: 1 button = primary, 2 buttons = primary + primaryOutline
- **ALWAYS use Button component** (never native buttons)
- **Loading state**: Shows ArrowPathIcon with animate-spin

---

## üìù Form System (MANDATORY)

### InputFactory Component (MUST USE)
```jsx
// InputFactory Component - MANDATORY PATTERN
export default function InputFactory({ fieldName, config, value, onChange, className = '' }) {
  const {
    type = 'String',
    label,
    placeholder,
    required = false,
    format,
    showPasswordToggle = false,
    ...otherProps
  } = config;

  const handleChange = (e) => {
    let newValue = e.target.value;
    
    if (type === 'Number') {
      newValue = newValue === '' ? '' : parseFloat(newValue);
      if (isNaN(newValue)) return;
    } else if (type === 'Boolean') {
      newValue = e.target.checked;
    }
    // CRITICAL: Never create objects for password fields - causes [object] [object] display
    // DO NOT: newValue = { ...value, value: newValue };
    
    onChange(newValue);
  };

  const inputId = `field-${fieldName}`;
  const commonProps = {
    id: inputId,
    name: fieldName,
    value: value || '',
    onChange: handleChange,
    className: `w-full h-10 px-3 border border-gray-300 rounded-md text-sm transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent ${className}`,
    placeholder: placeholder || `Enter ${label || fieldName}`,
    required: required,
    ...otherProps
  };

  return (
    <div>
      <label htmlFor={inputId} className="block text-sm font-medium text-gray-700 mb-1">
        {label || fieldName}
        {required && <span className="text-red-500 ml-1">*</span>}
      </label>
      {/* Input rendering based on type */}
      {renderInput()}
    </div>
  );
}
```

### Input Usage Patterns (MANDATORY)
```jsx
// Text Input - MANDATORY
<InputFactory
  fieldName="email"
  config={{
    type: 'String',
    label: 'Email Address',
    placeholder: 'Enter email',
    required: true,
    format: 'email'
  }}
  value={email}
  onChange={handleChange}
/>

// Password Input - MANDATORY
<InputFactory
  fieldName="password"
  config={{
    type: 'String',
    label: 'Password',
    format: 'password',
    showPasswordToggle: true,
    required: true
  }}
  value={password}
  onChange={handleChange}
/>

// Number Input - MANDATORY
<InputFactory
  fieldName="amount"
  config={{
    type: 'Number',
    label: 'Amount',
    placeholder: 'Enter amount',
    required: true
  }}
  value={amount}
  onChange={handleChange}
/>
```

### SelectInput Component (MUST USE)
```jsx
// SelectInput Component - MANDATORY PATTERN
<SelectInput
  label="Select Option"
  options={[
    { value: 'option1', label: 'Option 1' },
    { value: 'option2', label: 'Option 2' }
  ]}
  value={selectedValue}
  onChange={handleChange}
  placeholder="Choose an option"
  searchable={true}
  multiple={false}
  required={true}
/>
```

### CurrencyInput Component (MUST USE)
```jsx
// CurrencyInput Component - MANDATORY PATTERN
import { useState } from 'react';

const CurrencyInput = ({ 
  value = { amount: '', currency: 'USD' }, 
  onChange, 
  label, 
  placeholder = 'Enter amount',
  required = false,
  disabled = false,
  className = '',
  error = null,
  showLabel = true
}) => {
  const [isCurrencyOpen, setIsCurrencyOpen] = useState(false);
  const [isFocused, setIsFocused] = useState(false);

  const currencies = [
    { code: 'USD', symbol: '$', name: 'US Dollar' },
    { code: 'EUR', symbol: '‚Ç¨', name: 'Euro' },
    { code: 'GBP', symbol: '¬£', name: 'British Pound' },
    { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar' },
    { code: 'AUD', symbol: 'A$', name: 'Australian Dollar' },
    { code: 'JPY', symbol: '¬•', name: 'Japanese Yen' },
    { code: 'CHF', symbol: 'CHF', name: 'Swiss Franc' },
    { code: 'CNY', symbol: '¬•', name: 'Chinese Yuan' }
  ];

  const selectedCurrency = currencies.find(c => c.code === value.currency) || currencies[0];

  const handleAmountChange = (e) => {
    let amount = e.target.value;
    
    // Remove any non-numeric characters except decimal point and commas
    amount = amount.replace(/[^0-9.,]/g, '');
    
    // Remove existing commas and format with new commas
    const numericValue = amount.replace(/,/g, '');
    
    // Format with commas for thousands separator
    if (numericValue && !isNaN(numericValue)) {
      const parts = numericValue.split('.');
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      amount = parts.join('.');
    }
    
    onChange({
      amount,
      currency: value.currency
    });
  };

  const handleAmountBlur = (e) => {
    let amount = e.target.value;
    
    // Remove any non-numeric characters except decimal point and commas
    amount = amount.replace(/[^0-9.,]/g, '');
    
    // Remove existing commas and format with new commas
    const numericValue = amount.replace(/,/g, '');
    
    // Format with commas for thousands separator
    if (numericValue && !isNaN(numericValue)) {
      const parts = numericValue.split('.');
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      amount = parts.join('.');
    }
    
    onChange({
      amount,
      currency: value.currency
    });
  };

  const handleCurrencyChange = (currencyCode) => {
    onChange({
      amount: value.amount,
      currency: currencyCode
    });
    setIsCurrencyOpen(false);
  };

  return (
    <div className={`space-y-1 ${className}`}>
      {showLabel && label && (
        <label className="block text-sm font-medium text-gray-700">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      
      <div className="relative">
        <div className="flex">
          {/* Currency Selector */}
          <div className="relative">
            <button
              type="button"
              onClick={() => !disabled && setIsCurrencyOpen(!isCurrencyOpen)}
              disabled={disabled}
              className={`
                flex items-center justify-center px-3 py-2 border border-r-0 rounded-l-md
                transition-colors duration-200 min-w-[50px] h-10
                ${disabled 
                  ? 'bg-gray-50 text-gray-400 cursor-not-allowed border-gray-300' 
                  : 'bg-white text-gray-900 hover:bg-gray-50 cursor-pointer'
                }
                ${isFocused && !disabled
                  ? 'border-primary-500 ring-2 ring-primary-500'
                  : error 
                    ? 'border-red-300' 
                    : 'border-gray-300'
                }
              `}
            >
              <span className="text-sm text-gray-600">{selectedCurrency.symbol}</span>
            </button>

            {/* Currency Dropdown */}
            {isCurrencyOpen && (
              <div className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-50 min-w-[200px]">
                <div className="py-1">
                  {currencies.map((currency) => (
                    <button
                      key={currency.code}
                      onClick={() => handleCurrencyChange(currency.code)}
                      className={`
                        w-full px-3 py-2 text-left text-sm hover:bg-gray-100 transition-colors
                        flex items-center justify-between
                        ${currency.code === value.currency ? 'bg-primary-50 text-primary-700' : 'text-gray-900'}
                      `}
                    >
                      <div className="flex items-center space-x-2">
                        <span className="font-medium">{currency.symbol}</span>
                        <span>{currency.code}</span>
                      </div>
                      <span className="text-xs text-gray-500">{currency.name}</span>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Amount Input */}
          <input
            type="text"
            value={value.amount}
            onChange={handleAmountChange}
            onFocus={() => setIsFocused(true)}
            onBlur={(e) => {
              setIsFocused(false);
              handleAmountBlur(e);
            }}
            placeholder={placeholder}
            disabled={disabled}
            required={required}
            className={`
              flex-1 px-3 py-2 border rounded-r-md text-sm
              focus:outline-none transition-colors duration-200 h-10
              ${disabled 
                ? 'bg-gray-50 text-gray-400 cursor-not-allowed border-gray-300' 
                : 'bg-white text-gray-900'
              }
              ${isFocused && !disabled
                ? 'border-primary-500 ring-2 ring-primary-500'
                : error 
                  ? 'border-red-300' 
                  : 'border-gray-300'
              }
            `}
          />
        </div>
      </div>

      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}
    </div>
  );
};

export default CurrencyInput;
```

### CurrencyInput Usage Patterns (MANDATORY)
```jsx
// Currency Input - MANDATORY
<CurrencyInput
  value={currencyValue}
  onChange={handleCurrencyChange}
  label="Contract Value"
  placeholder="Enter amount"
  required={true}
  showLabel={true}
/>

// Currency Input via InputFactory - MANDATORY
<InputFactory
  fieldName="value"
  config={{
    type: 'Currency',
    label: 'Contract Value',
    placeholder: 'Enter contract value',
    required: true
  }}
  value={currencyValue}
  onChange={handleCurrencyChange}
/>
```

### CurrencyInput Rules (MANDATORY)
- **ALWAYS use CurrencyInput component** for monetary values
- **ALWAYS implement real-time comma formatting** (thousands separator)
- **ALWAYS use currency symbols** (not currency codes) in the selector button
- **ALWAYS implement unified focus styling** (both currency button and input field)
- **ALWAYS use seamless border connection** (currency button has border-r-0, input has full border)
- **ALWAYS prevent duplicate labels** (use showLabel prop when rendered via InputFactory)
- **ALWAYS format numbers with commas** in real-time as user types
- **ALWAYS support decimal values** with proper formatting
- **ALWAYS validate input** (only allow numbers, commas, and decimal points)
- **ALWAYS use proper currency dropdown** with symbol, code, and name display
- **Field type**: Currency (for InputFactory integration)
- **Value format**: `{ amount: '12,345.67', currency: 'USD' }`
- **Required fields**: Show asterisk (*) and validate
- **Error display**: Use error prop for validation messages

### CurrencyInput Styling Rules (MANDATORY)
- **Currency Button**: `min-w-[50px] h-10`, `border border-r-0 rounded-l-md`
- **Amount Input**: `flex-1 h-10`, `border rounded-r-md`
- **Currency Symbol**: `text-sm text-gray-600` (not bold)
- **Focus States**: Unified `border-primary-500 ring-2 ring-primary-500` for both elements
- **Error States**: `border-red-300` for both elements
- **Disabled States**: `bg-gray-50 text-gray-400 cursor-not-allowed`
- **Dropdown**: `z-50 min-w-[200px]` with proper currency display

### Form Rules (MANDATORY)
- **ALWAYS use InputFactory component** (never native inputs)
- **ALWAYS use SelectInput for dropdowns**
- **ALWAYS use CurrencyInput for monetary values**
- **ALWAYS implement proper validation**
- **ALWAYS use toast notifications for errors** (not inline field errors)
- **Field types**: String, Number, Boolean, Date, Array, Currency
- **Required fields**: Show asterisk (*) and validate
- **Error display**: Use toast notifications instead of inline errors

---

## üçû Toast Error System (MANDATORY)

### Toast Component (MUST USE)
```jsx
// Toast Component - MANDATORY PATTERN
import { Toaster } from 'react-hot-toast';

const Toast = () => {
  return (
    <Toaster 
      position="top-right"
      toastOptions={{
        duration: 4000,
        style: {
          borderRadius: '8px',
          padding: '12px 16px',
          fontSize: '14px',
          fontWeight: '500',
          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
          maxWidth: '400px',
        },
        success: {
          duration: 3000,
          style: {
            background: 'var(--color-green-50)',
            color: 'var(--color-green-600)',
            border: '1px solid var(--color-green-200)',
          },
          icon: '‚úÖ',
        },
        error: {
          duration: 5000,
          style: {
            background: 'var(--color-red-50)',
            color: 'var(--color-red-600)',
            border: '1px solid var(--color-red-200)',
          },
          icon: '‚ùå',
        },
        warning: {
          duration: 4000,
          style: {
            background: 'var(--color-orange-50)',
            color: 'var(--color-orange-600)',
            border: '1px solid var(--color-orange-200)',
          },
          icon: '‚ö†Ô∏è',
        },
        info: {
          duration: 4000,
          style: {
            background: 'var(--color-blue-50)',
            color: 'var(--color-blue-600)',
            border: '1px solid var(--color-blue-200)',
          },
          icon: '‚ÑπÔ∏è',
        },
        loading: {
          duration: 0, // Loading toasts don't auto-dismiss
          style: {
            background: 'var(--color-primary-50)',
            color: 'var(--color-primary-600)',
            border: '1px solid var(--color-primary-200)',
          },
          icon: '‚è≥',
        },
      }}
    />
  );
};

export default Toast;
```

### Toast Component Usage (MANDATORY)
```jsx
// Toast Component Integration - MANDATORY PATTERN
// 1. Import Toast component in main App.jsx
import Toast from './components/Toast';

// 2. Add Toast component to App component
function App() {
  return (
    <div className="App">
      {/* Your app content */}
      <Toast />
    </div>
  );
}

// 3. Import toast function in components that need notifications
import { toast } from 'react-hot-toast';
```

### Toast Error Implementation (MUST USE)
```jsx
// Toast Error System - MANDATORY PATTERN
import { toast } from 'react-hot-toast';

// Form validation with toast notifications
const handleSubmit = async (e) => {
  e.preventDefault();
  
  // Clear previous errors
  setError(null);
  
  try {
    await submitForm(formData);
    toast.success('Form submitted successfully!');
  } catch (error) {
    toast.error(error.message || 'An error occurred');
    setError(error.message);
  }
};

// API errors with toast notifications
const handleApiError = (error) => {
  toast.error(error.message || 'API request failed');
  console.error('API Error:', error);
};

// Input validation with toast
const validateField = (fieldName, value) => {
  if (!value && required) {
    toast.error(`${fieldName} is required`);
    return false;
  }
  return true;
};

// Loading states with toast
const handleAsyncOperation = async () => {
  const loadingToast = toast.loading('Processing...');
  
  try {
    await performOperation();
    toast.success('Operation completed successfully!', { id: loadingToast });
  } catch (error) {
    toast.error(error.message || 'Operation failed', { id: loadingToast });
  }
};
```

### Toast Error Rules (MANDATORY)
- **ALWAYS use the Toast component** for all toast notifications
- **ALWAYS import Toast component** in main App.jsx and render it
- **ALWAYS use toast notifications** for form validation errors
- **ALWAYS use toast notifications** for API errors
- **NEVER show inline error messages** on form fields
- **ALWAYS clear previous errors** before new validation
- **ALWAYS provide meaningful error messages** in toast notifications
- **ALWAYS use consistent toast styling** across the application
- **ALWAYS use react-hot-toast** for toast functionality
- **ALWAYS configure toast options** with proper styling and durations

### Toast Integration with Forms (MANDATORY)
```jsx
// Form with Toast Error Handling - MANDATORY PATTERN
const FormComponent = () => {
  const [formData, setFormData] = useState({});
  const [error, setError] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);

    try {
      // Validate form data
      if (!formData.email) {
        toast.error('Email is required');
        return;
      }
      if (!formData.password) {
        toast.error('Password is required');
        return;
      }

      // Submit form
      await submitForm(formData);
      toast.success('Form submitted successfully!');
    } catch (error) {
      toast.error(error.message || 'Submission failed');
      setError(error.message);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <InputFactory
        fieldName="email"
        config={{ type: 'String', label: 'Email', required: true }}
        value={formData.email}
        onChange={(value) => setFormData({...formData, email: value})}
      />
      <InputFactory
        fieldName="password"
        config={{ type: 'String', label: 'Password', required: true }}
        value={formData.password}
        onChange={(value) => setFormData({...formData, password: value})}
      />
      <Button type="submit" variant="primary">
        Submit
      </Button>
    </form>
  );
};
```

---

## üÉè Card System (MANDATORY)

### Standard Card (MUST USE)
```jsx
// Standard Card - MANDATORY PATTERN
<div className="bg-white rounded-lg p-6 shadow-sm border border-gray-100">
  <h3 className="text-lg font-semibold text-gray-900 mb-4">Card Title</h3>
  <p className="text-sm text-gray-600 leading-relaxed">Card content...</p>
  <div className="mt-4 flex justify-end space-x-3">
    <Button variant="secondaryOutline" size="sm">Cancel</Button>
    <Button variant="primary" size="sm">Save</Button>
  </div>
</div>
```

### Metric Card (MUST USE)
```jsx
// Metric Card - MANDATORY PATTERN
<div className="bg-white rounded-lg p-5 shadow-sm border border-gray-100">
  <div className="flex items-center justify-between mb-3">
    <div className="w-10 h-10 bg-primary-50 rounded-lg flex items-center justify-center">
      <FolderIcon className="h-6 w-6 text-primary-600" />
    </div>
    <span className="text-xs font-medium text-green-800 bg-green-50 px-2 py-1 rounded-full">
      +12%
    </span>
  </div>
  <h3 className="text-2xl font-bold text-gray-900 mb-1">1,234</h3>
  <p className="text-sm text-gray-600 mb-2">Total Projects</p>
  <div className="flex items-center justify-between">
    <span className="text-xs text-gray-500">From last month</span>
    <div className="flex items-center space-x-1">
      <ArrowUpIcon className="h-4 w-4 text-green-800" />
      <span className="text-xs font-medium text-green-800">12%</span>
    </div>
  </div>
</div>
```

### Feature Card (MUST USE)
```jsx
// Feature Card - MANDATORY PATTERN
<div className="bg-white p-8 rounded-2xl shadow-sm hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-100 group">
  <div className="w-16 h-16 bg-gradient-to-br from-primary-100 to-indigo-100 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300">
    <svg className="w-8 h-8 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
    </svg>
  </div>
  <h3 className="text-lg font-semibold text-gray-900 mb-4 text-center">Feature Title</h3>
  <p className="text-sm text-gray-600 leading-relaxed text-center">Feature description...</p>
</div>
```

### Card Rules (MANDATORY)
- **ALWAYS use the specified card patterns**
- **ALWAYS implement proper spacing and typography**
- **ALWAYS use consistent padding values**
- **ALWAYS implement hover states for interactive cards**
- **Standard Card**: p-6, rounded-lg, shadow-sm
- **Metric Card**: p-5, icon container w-10 h-10, status badges
- **Feature Card**: p-8, rounded-2xl, hover effects, centered content

---

## üß≠ Navigation System (MANDATORY)
**Note: For complete navigation system implementation, see `@layout-structure.mdc`**

### Navigation Components (MUST USE)
- **Header Component**: Complete implementation with responsive profile dropdown
- **NavSidebar Component**: Complete implementation with responsive behavior
- **Navigation Rules**: Positioning, responsive behavior, touch targets
- **Context Integration**: MainLayout.Context for state management

### Navigation Rules (MANDATORY)
- **Header**: sticky top-0 z-40 h-16, responsive profile dropdown
- **NavSidebar**: w-80 max-w-[80vw] lg:w-[270px], responsive behavior
- **Touch targets**: min-w-[44px] min-h-[44px] for all interactive elements
- **Context**: Use MainLayout.Context for sidebar state management

---

## üéØ Interactive Elements (MANDATORY)

### Modal System (MUST USE)

#### FormModal Component (MANDATORY)
```jsx
// FormModal - MANDATORY PATTERN (Matches current codebase)
// Modal MUST use Button components (never native buttons)
// Modal MUST have fixed header and footer with scrollable content
// Modal MUST use confirmation modal ‚Üí success toast flow
<FormModal
  isOpen={showModal}
  onClose={() => setShowModal(false)}
  onSubmit={handleSubmit}
  title="Create/Edit Item"
  fields={formFields}
  initialData={initialData}
  loading={loading}
  isUpdate={false}
/>

// FormModal Structure - MANDATORY
// 1. Fixed Header: Contains title and close button
// 2. Scrollable Content: Form fields with max-height and overflow-y-auto
// 3. Fixed Footer: Action buttons (Cancel and Create/Update)
// 4. Confirmation Flow: Form submission ‚Üí ConfirmationModal ‚Üí Success toast
// 5. Button States: Create/Update button disabled if required fields not filled OR no changes (for edit forms)

// FormModal Width Rules - MANDATORY
- Default: max-w-lg sm:max-w-xl (512px mobile, 576px desktop)
- Large forms: max-w-2xl sm:max-w-3xl (672px mobile, 768px desktop)
- Full width: w-full max-w-4xl (1024px max)
- Responsive: Always use responsive max-width classes

// FormModal Layout Rules - MANDATORY
- Header: Fixed position with border-b border-gray-200
- Content: Scrollable with max-h-96 overflow-y-auto
- Footer: Fixed position with border-t border-gray-200
- Padding: p-4 sm:p-6 for all sections
- Spacing: space-y-4 for form fields

// FormModal Button Rules - MANDATORY
- Cancel Button: variant="secondaryOutline", full width
- Create/Update Button: variant="primary", full width
- Button States: disabled if loading OR !isFormValid OR !hasChanges
- Loading States: Shows loading spinner and "Creating..."/"Updating..." text
- Confirmation: Form submission opens ConfirmationModal, not direct submission
```

#### ConfirmationModal Component (MANDATORY)
```jsx
// ConfirmationModal - MANDATORY PATTERN (Matches current codebase)
// Modal MUST use Button components (never native buttons)
<ConfirmationModal
  isOpen={showModal}
  onClose={() => setShowModal(false)}
  onConfirm={handleConfirm}
  title="Confirm Action"
  message="Are you sure you want to perform this action?"
  confirmLabel="Confirm"
  cancelLabel="Cancel"
  icon="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.502 0L4.318 18.5c-.77.833.192 2.5 1.732 2.5z"
  variant="danger"
/>

// Modal Icon Styles - MANDATORY (Matches current codebase)
const getIconStyles = () => {
  switch (variant) {
    case 'danger':
      return { iconColor: 'text-red-600', iconBgColor: 'bg-red-100' };
    case 'warning':
      return { iconColor: 'text-orange-600', iconBgColor: 'bg-orange-100' };
    case 'info':
      return { iconColor: 'text-blue-600', iconBgColor: 'bg-blue-100' };
    default:
      return { iconColor: 'text-red-600', iconBgColor: 'bg-red-100' };
  }
};

// Modal Button Rules - MANDATORY (Matches current codebase)
// If 1 button: use variant="primary"
// If 2 buttons: use variant="danger/warning/info" and variant="primaryOutline"
// ALWAYS use Button component (never native buttons)
```

#### Form Flow Rules (MANDATORY)
```jsx
// Form Submission Flow - MANDATORY PATTERN
// 1. User fills form and clicks Create/Update button
// 2. Form validation checks required fields and changes
// 3. If valid and has changes: Opens ConfirmationModal
// 4. User confirms in ConfirmationModal
// 5. Form submits and shows success toast
// 6. Modal closes

// Button State Logic - MANDATORY
const isButtonDisabled = loading || !isFormValid || !hasChanges;

// Create Form: hasChanges = true (always considered as having changes)
// Edit Form: hasChanges = true only if any field value differs from initialData

// Form Validation Rules - MANDATORY
- Required fields: Must not be empty
- Email fields: Must match email regex pattern
- Number fields: Must be valid numbers >= 0
- Real-time validation: Errors clear when user starts typing
- Toast notifications: Use for validation errors, not inline field errors
```

### Modal Positioning Rules (MANDATORY)
```jsx
// Modal MUST be centered in the MIDDLE of the entire system (not center-top)
// Backdrop MUST use bg-black/50 (50% black opacity) with z-index: 40
// Modal content MUST be positioned ABOVE backdrop with z-index: 50
// Modal MUST be fixed positioned to cover entire viewport
// Modal MUST use createPortal to render at document.body level
// Modal MUST be visible and properly centered when triggered
// Modal MUST use Button component (never native buttons)

// CORRECT Modal Structure with Portal (Matches current codebase):
import { createPortal } from 'react-dom';

return createPortal(
  <div className="fixed inset-0 z-50 overflow-y-auto">
    <div className="flex items-center justify-center min-h-screen px-4">
      {/* Backdrop - MANDATORY (z-index: 40) */}
      <div className="fixed inset-0 z-40 transition-opacity bg-black/50" onClick={onClose}></div>
      
      {/* Modal Content - MANDATORY (z-index: 50 - ABOVE backdrop) */}
      <div className="relative z-50 w-full max-w-md p-6 overflow-hidden text-left transition-all transform bg-white shadow-xl rounded-xl">
        {/* Modal content with Button components */}
      </div>
    </div>
  </div>,
  document.body
);
```

### Modal Visibility Rules (MANDATORY)
```jsx
// Modal MUST be visible when isOpen is true
// Modal MUST be hidden when isOpen is false
// Modal MUST render at document.body level (not inside component containers)
// Modal backdrop MUST cover entire viewport
// Modal content MUST be centered both horizontally and vertically
// Modal MUST work from both Header (mobile dropdown) and NavSidebar footer button
```

### Toast System (MUST USE)
```jsx
// Toast Component - MANDATORY PATTERN
<Toast
  message="Success message"
  type="success"
  onClose={() => removeToast(id)}
  duration={3000}
/>
```

### Floating Elements (MANDATORY)
```jsx
// SmartFloatingActionButton - MANDATORY PATTERN
// ALL PAGES MUST use SmartFloatingActionButton

// Dynamic Behavior Logic - MANDATORY
// Default State (No Selection):
// - Dashboard: Shows 3 vertical dots (multiple actions available)
// - Other Pages (Appointments, Patients, Telemedicine): Shows "+" icon (single add action)
// Selection State (When Checkboxes are Selected):
// - All Pages: Changes from "+" to 3 vertical dots
// - Expanded Actions: Shows relevant bulk actions based on page context

// Single Action Logic - MANDATORY
// If 1 action button: display the specific icon (e.g., plus icon) on the FAB
<SmartFloatingActionButton 
  variant="single"
  icon="PlusIcon" // Specific action icon
  label="Add new item"
  action={handleAddAction}
  selectedCount={selectedRows.size}
  bulkActions={[
    { name: 'Delete Selected', icon: 'TrashIcon', action: handleBulkDelete, color: 'bg-red-600' },
    { name: 'Export Selected', icon: 'ArrowDownTrayIcon', action: handleBulkExport, color: 'bg-blue-600' }
  ]}
  quickActions={[
    { name: 'New Item', icon: 'PlusIcon', action: handleAdd, color: 'bg-primary-600' },
    { name: 'Import', icon: 'ArrowUpTrayIcon', action: handleImport, color: 'bg-green-600' },
    { name: 'Export', icon: 'ArrowDownTrayIcon', action: handleExport, color: 'bg-blue-600' }
  ]}
/>

// Multiple Actions Logic - MANDATORY  
// If 2+ action buttons: use 3 vertical dots icon and expand to show button choices
<SmartFloatingActionButton 
  variant="dots"
  icon="EllipsisVerticalIcon" // Always vertical 3-dots icon for multiple actions
  label="Toggle quick actions"
  selectedCount={selectedRows.size}
  bulkActions={[
    { name: 'Delete Selected', icon: 'TrashIcon', action: handleBulkDelete, color: 'bg-red-600' },
    { name: 'Export Selected', icon: 'ArrowDownTrayIcon', action: handleBulkExport, color: 'bg-blue-600' }
  ]}
  quickActions={[
    { name: 'Add New', icon: 'PlusIcon', action: handleAdd, color: 'bg-primary-600' },
    { name: 'Import', icon: 'ArrowUpTrayIcon', action: handleImport, color: 'bg-green-600' },
    { name: 'Export', icon: 'ArrowDownTrayIcon', action: handleExport, color: 'bg-blue-600' }
  ]}
/>

// Comprehensive Icon Mappings - MANDATORY
// SmartFloatingActionButton MUST import and support all action icons:
import { 
  PlusIcon, 
  EllipsisVerticalIcon,
  ArrowUpTrayIcon,
  ArrowDownTrayIcon,
  TrashIcon,
  CalendarDaysIcon,
  UserPlusIcon,
  CheckCircleIcon,
  PlayIcon,
  EyeIcon,
  PencilIcon,
  DocumentArrowDownIcon,
  DocumentArrowUpIcon
} from '@heroicons/react/24/outline';

// Icon Component Resolution - MANDATORY
const getIconComponent = (iconName) => {
  const iconMap = {
    PlusIcon,
    EllipsisVerticalIcon,
    ArrowUpTrayIcon,
    ArrowDownTrayIcon,
    TrashIcon,
    CalendarDaysIcon,
    UserPlusIcon,
    CheckCircleIcon,
    PlayIcon,
    EyeIcon,
    PencilIcon,
    DocumentArrowDownIcon,
    DocumentArrowUpIcon
  };
  return iconMap[iconName] || EllipsisVerticalIcon; // Fallback to 3 dots only if icon not found
};

// Expanded Floating Buttons - UPDATED MANDATORY PATTERN (Viewport fixed positioning)
// FAB and its expanded actions MUST NOT scroll with page content. They are fixed to the viewport.
{currentVariant === 'dots' && isExpanded && (
  <div className="fixed bottom-24 right-6 z-[80] flex flex-col items-end space-y-3">
    {currentActions.map((action, index) => (
      <div 
        key={action.name}
        className="flex items-center space-x-3"
        style={{
          animationDelay: `${index * 100}ms`,
          animation: 'slideInFromBottom 0.3s ease-out forwards'
        }}
      >
        {/* Action Label */}
        <div className="bg-white px-2 py-1 rounded-lg shadow-card border border-gray-200">
          <span className="text-xs font-medium text-gray-700 whitespace-nowrap">
            {action.name}
          </span>
        </div>
        
        {/* Action Button - MUST use proper icon component resolution */}
        <button
          onClick={action.action}
          className={`w-12 h-12 ${action.color} text-white rounded-full shadow-card flex items-center justify-center transition-all duration-200 hover:scale-110 hover:shadow-card-hover`}
          aria-label={action.name}
        >
          {action.icon && (() => {
            const ActionIconComponent = getIconComponent(action.icon);
            return <ActionIconComponent className="h-5 w-5" />;
          })()}
        </button>
      </div>
    ))}
  </div>
)}

// Main FAB Button - MANDATORY PATTERN
// FAB MUST be fixed to the viewport bottom-right and should not move with content scroll.
<button
  onClick={handleMainButtonClick}
  className={`fixed bottom-6 right-6 z-[80] w-14 h-14 bg-primary-600 hover:bg-primary-700 text-white rounded-full shadow-card flex items-center justify-center transition-all duration-300 hover:scale-110 hover:shadow-card-hover ${
    currentVariant === 'dots' && isExpanded ? 'rotate-90' : ''
  }`}
  aria-label={currentLabel}
>
  <IconComponent className="h-5 w-5" />
</button>

// FloatingChatbot - MANDATORY PATTERN
<FloatingChatbot />
```

### SmartFloatingActionButton Icon Rules (MANDATORY)
```jsx
// CRITICAL: Icon Rules - MANDATORY
// 1. NO DEFAULT ICONS: SmartFloatingActionButton MUST NOT have default icons
// 2. ICON BASED ON ACTION: Icons MUST be based on the button's action/label
// 3. EXCEPTION: Only EllipsisVerticalIcon (3 dots) is allowed as default for multiple actions
// 4. ACTION-SPECIFIC ICONS: Each action button MUST have an icon that matches its function
// 5. ICON MAPPING: Use getIconComponent function to resolve string icon names to components
// 6. NO FALLBACK ICONS: Do not use generic icons like PlusIcon for all actions
// 7. SEMANTIC ICONS: Icons must semantically represent the action (e.g., TrashIcon for delete, CalendarDaysIcon for reschedule)

// Icon Usage Examples - MANDATORY
// ‚úÖ CORRECT: Icons match their actions
{ name: 'Delete Selected', icon: 'TrashIcon', action: handleBulkDelete, color: 'bg-red-600' }
{ name: 'Reschedule Selected', icon: 'CalendarDaysIcon', action: handleBulkReschedule, color: 'bg-blue-600' }
{ name: 'Activate Selected', icon: 'CheckCircleIcon', action: handleBulkActivate, color: 'bg-green-600' }
{ name: 'Start Selected', icon: 'PlayIcon', action: handleBulkStart, color: 'bg-primary-600' }
{ name: 'Export Selected', icon: 'ArrowDownTrayIcon', action: handleBulkExport, color: 'bg-blue-600' }
{ name: 'Import', icon: 'ArrowUpTrayIcon', action: handleImport, color: 'bg-green-600' }
{ name: 'View Details', icon: 'EyeIcon', action: handleView, color: 'bg-gray-600' }
{ name: 'Edit', icon: 'PencilIcon', action: handleEdit, color: 'bg-orange-600' }

// ‚ùå WRONG: Generic icons for all actions
{ name: 'Delete Selected', icon: 'PlusIcon', action: handleBulkDelete, color: 'bg-red-600' } // Wrong icon
{ name: 'Reschedule Selected', icon: 'PlusIcon', action: handleBulkReschedule, color: 'bg-blue-600' } // Wrong icon

// Icon Resolution Pattern - MANDATORY
const getIconComponent = (iconName) => {
  const iconMap = {
    PlusIcon,                    // Add/Create actions
    EllipsisVerticalIcon,        // Multiple actions (3 dots)
    TrashIcon,                   // Delete actions
    CalendarDaysIcon,            // Schedule/Reschedule actions
    CheckCircleIcon,             // Activate/Complete actions
    PlayIcon,                    // Start/Launch actions
    ArrowDownTrayIcon,           // Export/Download actions
    ArrowUpTrayIcon,             // Import/Upload actions
    EyeIcon,                     // View/Preview actions
    PencilIcon,                  // Edit/Modify actions
    UserPlusIcon,                // Add user actions
    DocumentArrowDownIcon,       // Export document actions
    DocumentArrowUpIcon          // Import document actions
  };
  return iconMap[iconName] || EllipsisVerticalIcon; // Fallback to 3 dots only if icon not found
};
```

---

## üîê Sign Out Confirmation (MANDATORY)

### Logout Confirmation Modal (MUST USE)
```jsx
// Sign Out MUST be confirmed using the shared ConfirmationModal component
const [showLogoutConfirm, setShowLogoutConfirm] = useState(false);

// Trigger from Header mobile dropdown OR NavSidebar footer button
<Button
  onClick={() => setShowLogoutConfirm(true)}
  variant="primaryOutline"
  size="md"
>
  <ArrowRightOnRectangleIcon className="h-5 w-5 mr-2" />
  Sign Out
</Button>

<ConfirmationModal
  isOpen={showLogoutConfirm}
  onClose={() => setShowLogoutConfirm(false)}
  onConfirm={handleLogout}
  title="Sign out"
  message="Are you sure you want to sign out?"
  confirmLabel="Sign out"
  cancelLabel="Cancel"
  icon="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.502 0L4.318 18.5c-.77.833.192 2.5 1.732 2.5z"
  iconColor="text-red-600"
  iconBgColor="bg-red-100"
  variant="danger"
/>
```

### Logout Confirmation Rules (MANDATORY)
```jsx
- Header (mobile dropdown) and NavSidebar footer MUST open ConfirmationModal for sign out
- Do NOT perform immediate logout on click
- Use destructive semantics: confirm button text = "Sign out" and red icon styling
- Maintain touch targets ‚â• 44px and use Button component variants
```

---

## üö´ No Horizontal Scrolling Components (MANDATORY)

### Component No-Scroll Patterns (MUST USE)
```jsx
// Button Container - MANDATORY (No overflow)
<div className="flex flex-wrap gap-2 w-full">
  <Button variant="primary" size="sm">Action 1</Button>
  <Button variant="secondary" size="sm">Action 2</Button>
</div>

// Navigation - MANDATORY (No horizontal scroll)
<nav className="flex flex-wrap items-center justify-between w-full px-4 py-2">
  {/* Navigation items */}
</nav>

// Card Grid - MANDATORY (Responsive grid)
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 w-full">
  {/* Cards that fit viewport */}
</div>

// Sidebar - MANDATORY (No overflow)
<div className="w-80 max-w-[80vw] lg:w-[270px] h-full overflow-y-auto overflow-x-hidden">
  {/* Sidebar content */}
</div>

// Table Container - MANDATORY (Responsive table)
<div className="w-full overflow-x-auto">
  <table className="min-w-full divide-y divide-gray-200">
    {/* Table content */}
  </table>
</div>

// Form Container - MANDATORY (No overflow)
<form className="w-full max-w-md mx-auto space-y-4">
  {/* Form fields */}
</form>

// Content Container - MANDATORY (Viewport fitting)
<div className="w-full max-w-full px-4 sm:px-6 lg:px-8">
  {/* Page content */}
</div>
```

### No-Scroll Component Rules (MANDATORY)
```jsx
// Container Rules - MANDATORY
- Always use: w-full max-w-full
- Never use: fixed widths that exceed viewport
- Always use: overflow-x-hidden for containers
- Always use: flex-wrap for button groups

// Grid Rules - MANDATORY
- Always use: responsive grid classes
- Mobile: grid-cols-1
- Tablet: md:grid-cols-2
- Desktop: lg:grid-cols-3 or lg:grid-cols-4

// Table Rules - MANDATORY
- Always wrap in: w-full overflow-x-auto
- Always use: min-w-full for table
- Never use: fixed table widths

// Form Rules - MANDATORY
- Always use: w-full max-w-md mx-auto
- Always use: space-y-4 for vertical spacing
- Never use: fixed form widths
```

---

## üîç Filter Components (MANDATORY)

### SearchFilter Component (MUST USE)
```jsx
// SearchFilter Component - MANDATORY PATTERN (Matches current codebase)
<SearchFilter
  placeholder="Search..."
  value={searchValue}
  onChange={handleSearchChange}
  onSearch={handleSearch}
  onFilterChange={handleFilterChange}
  filters={filters}
  useSelectForSearch={false} // true for select, false for search input
  searchSelectOptions={searchSelectOptions}
  searchSelectValue={searchSelectValue}
  onSearchSelectChange={onSearchSelectChange}
  statusOptions={statusOptions}
  getUniqueCompanies={getUniqueCompanies}
  className="bg-gray-50 border-gray-200"
/>
```

### Filters Component (MUST USE)
```jsx
// Filters Component - MANDATORY PATTERN (Matches current codebase)
<Filters
  filters={filters}
  onFilterChange={handleFilterChange}
  categoryOptions={categoryOptions}
  statusOptions={statusOptions}
  className="bg-gray-100 border-gray-300"
/>
```

### Filter Component Structure (MANDATORY)
```jsx
// Main Filter Row - MANDATORY PATTERN
<div className="flex items-center gap-2 sm:gap-1">
  {/* Primary Filter - Search Input or Select Input */}
  <div className="flex-1 min-w-0">
    {useSelectForSearch ? (
      <SelectInput
        label=""
        value={searchSelectValue}
        onChange={onSearchSelectChange}
        options={searchSelectOptions}
        placeholder={placeholder}
        className="bg-gray-50 border-gray-200"
      />
    ) : (
      <SearchInput
        placeholder={placeholder}
        value={searchValue}
        onChange={handleSearchChange}
        onSearch={handleSearch}
        className="bg-gray-50 border-gray-200"
      />
    )}
  </div>

  {/* Filter Icon */}
  <button
    onClick={toggleFilterPanel}
    className="p-2 sm:p-2 text-gray-600 hover:text-primary-600 transition-colors flex-shrink-0"
  >
    <FunnelIcon className="h-4 w-4" />
  </button>
</div>

// Filter Panel Overlay - MANDATORY PATTERN
{isFilterPanelOpen && (
  <div 
    className="fixed inset-0 bg-black/30 bg-opacity-50 z-[125] h-screen"
    onClick={toggleFilterPanel}
  ></div>
)}

// Right Side Filter Panel - MANDATORY PATTERN
<div className={`
  fixed top-0 right-0 h-screen w-80 sm:w-72 bg-white shadow-lg z-[130] transform transition-transform duration-300 ease-in-out filter-panel-fixed
  ${isFilterPanelOpen ? 'translate-x-0' : 'translate-x-full'}
`}>
  <div className="flex flex-col h-full">
    {/* Panel Header */}
    <div className="p-4 sm:p-6 border-b border-gray-200 flex-shrink-0">
      <div className="flex items-center justify-between">
        <h3 className="text-base sm:text-lg font-semibold text-gray-800">Filters</h3>
        <button
          onClick={toggleFilterPanel}
          className="p-2 rounded transition-colors hover:bg-gray-100"
        >
          <XMarkIcon className="h-5 w-5 text-gray-600" />
        </button>
      </div>
    </div>

    {/* Filter Content */}
    <div className="flex-1 overflow-y-auto p-4 sm:p-6 space-y-4 sm:space-y-6">
      {/* Status Filter */}
      <SelectInput
        label="Status"
        value={filters.status}
        onChange={(value) => handleFilterChange('status', value)}
        options={statusOptions}
        className="filter-select-input"
      />

      {/* Company Filter */}
      <SelectInput
        label="Company"
        value={filters.company}
        onChange={(value) => handleFilterChange('company', value)}
        options={companyOptions}
        className="filter-select-input"
      />

      {/* Date Range Filter */}
      <DateRangeFilter
        value={filters.dateRange}
        onChange={(value) => handleFilterChange('dateRange', value)}
      />

      {/* Additional Filters */}
      {additionalFilters && additionalFilters.map((filter, index) => (
        <SelectInput
          key={index}
          label={filter.label}
          value={filters[filter.key]}
          onChange={(value) => handleFilterChange(filter.key, value)}
          options={filter.options}
          className="filter-select-input"
        />
      ))}
    </div>

    {/* Filter Actions */}
    <div className="p-4 sm:p-6 border-t border-gray-200 flex-shrink-0">
      <Button
        variant="primary"
        size="sm"
        onClick={applyFilters}
        className="w-full"
      >
        Apply Filters
      </Button>
    </div>
  </div>
</div>
```

### Filter Component Rules (MANDATORY)
```jsx
// Filter Panel Rules - MANDATORY
- Position: fixed top-0 right-0
- Width: w-80 sm:w-72 (320px desktop, 288px mobile)
- Z-index: z-[130] (above modals)
- Animation: translate-x-full to translate-x-0
- Overlay: bg-black/30 z-[125]

// Filter Input Rules - MANDATORY
- Primary: SearchInput OR SelectInput (configurable)
- Secondary: Filter icon button
- Layout: flex items-center gap-2 sm:gap-1
- Responsive: flex-1 min-w-0 for primary input

// Filter Content Rules - MANDATORY
- Scrollable: overflow-y-auto
- Spacing: space-y-4 sm:space-y-6
- Padding: p-4 sm:p-6
- Inputs: SelectInput with filter-select-input class

// Filter Actions Rules - MANDATORY
- Layout: single button with full width
- Button: Apply Filters only (Clear All removed)
- Sizing: w-full for full width
- Position: border-t border-gray-200
```

---

## üìä Data Display (MANDATORY)

### Collapsible Table Component (MUST USE)
```jsx
// Collapsible Table Component - MANDATORY PATTERN (Matches current codebase)
<CollapsibleTable
  data={tableData}
  columns={[
    { key: 'name', label: 'Name' },
    { key: 'status', label: 'Status', render: (value) => (
      <span className={`px-2 py-1 rounded-full text-xs ${
        value === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
      }`}>
        {value}
      </span>
    )}
  ]}
  onEdit={handleEdit}
  onDelete={handleDelete}
  loading={loading}
  sortable={true}
  searchable={true}
  pagination={true}
  itemsPerPage={10}
  expandableContent={(item) => (
    <div className="space-y-2">
      <p className="text-sm text-gray-600">Additional details...</p>
    </div>
  )}
  additionalActions={[
    { label: 'View Details', icon: 'eye', variant: 'secondaryOutline' },
    { label: 'Export', icon: 'download', variant: 'primaryOutline' }
  ]}
  searchPlaceholder="Search..."
  emptyMessage="No data found"
  // Selection functionality - MANDATORY
  selectedRows={selectedRows}
  onSelectionChange={handleSelectionChange}
  enableSelection={true}
/>
```

### Collapsible Table Structure (MANDATORY)
```jsx
// Table Header with Selection - MANDATORY PATTERN
<thead className="bg-gray-50">
  <tr>
    {/* Select All Checkbox - MANDATORY */}
    {enableSelection && (
      <th className="px-2 sm:px-3 lg:px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-12">
        <input
          type="checkbox"
          checked={isAllSelected}
          ref={(input) => {
            if (input) input.indeterminate = isIndeterminate;
          }}
          onChange={handleSelectAll}
          className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        />
      </th>
    )}
    
    {/* Data Column Headers */}
    {columns.map((column, index) => (
      <th 
        key={column.key}
        className={`px-2 sm:px-3 lg:px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider ${
          index >= 2 ? 'hidden sm:table-cell' : ''
        }`}
      >
        {column.label}
      </th>
    ))}
    
    {/* Expand/Collapse Header */}
    <th className="px-2 sm:px-3 lg:px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-12">
      Actions
    </th>
  </tr>
</thead>

// Main Row - MANDATORY PATTERN
<tr
  className="hover:bg-gray-50 transition-colors cursor-pointer group"
  onClick={() => toggleRowExpansion(item.id || index)}
>
  {/* Selection Checkbox - MANDATORY */}
  {enableSelection && (
    <td className="px-2 sm:px-3 lg:px-6 py-2 sm:py-3 text-center w-12">
      <input
        type="checkbox"
        checked={selectedRows.has(item.id || index)}
        onChange={(e) => handleRowSelect(e, item.id || index)}
        className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        onClick={(e) => e.stopPropagation()} // Prevent row expansion when clicking checkbox
      />
    </td>
  )}

  {/* Data Columns - Mobile responsive */}
  {columns.map((column, index) => (
    <td 
      key={column.key} 
      className={`px-2 sm:px-3 lg:px-6 py-2 sm:py-3 text-sm text-gray-900 text-center ${
        // Hide columns 3+ on mobile (keep first 2 columns visible)
        index >= 2 ? 'hidden sm:table-cell' : ''
      }`}
    >
      {column.render ? column.render(item[column.key], item) : item[column.key]}
    </td>
  ))}

  {/* Expand/Collapse Button - Right corner */}
  <td className="px-2 sm:px-3 lg:px-6 py-2 sm:py-3 text-center">
    <div className="flex items-center justify-center">
      <div className="p-1 text-gray-400 group-hover:text-gray-600 transition-colors">
        {isExpanded ? <ChevronUpIcon className="h-4 w-4" /> : <ChevronDownIcon className="h-4 w-4" />}
      </div>
    </div>
  </td>
</tr>

// Expanded Row Content - MANDATORY PATTERN
{isExpanded && (
  <tr>
    <td colSpan={columns.length + (enableSelection ? 2 : 1)} className="px-2 sm:px-3 lg:px-6 py-3 sm:py-4 bg-gray-50">
      <div className="space-y-3 sm:space-y-4 lg:space-y-6">
        {/* Mobile: Show hidden columns */}
        <div className="block sm:hidden space-y-3">
          {columns.slice(2).map((column) => (
            <div key={column.key} className="flex justify-between items-center">
              <span className="text-sm font-medium text-gray-500">{column.label}</span>
              <div className="text-sm text-gray-900">
                {column.render ? column.render(item[column.key], item) : item[column.key]}
              </div>
            </div>
          ))}
        </div>
        
        {/* Expandable Content */}
        {expandableContent && expandableContent(item)}

        {/* Action Buttons - Left corner inside expanded content */}
        {(onEdit || onDelete || additionalActions.length > 0) && (
          <div className="flex flex-wrap items-center gap-2 sm:gap-3">
            {/* Primary Actions */}
            {onEdit && (
              <Button
                variant="secondaryOutline"
                size="sm"
                onClick={(e) => handleEdit(e, item)}
                className="!w-auto"
              >
                <PencilIcon className="h-4 w-4 mr-2" />
                Edit
              </Button>
            )}
            
            {onDelete && (
              <Button
                variant="danger"
                size="sm"
                onClick={(e) => handleDelete(e, item)}
                className="!w-auto"
              >
                <TrashIcon className="h-4 w-4 mr-2" />
                Delete
              </Button>
            )}

            {/* Additional Actions - Smart display logic */}
            {(() => {
              const totalDirectButtons = (onEdit ? 1 : 0) + (onDelete ? 1 : 0) + additionalActions.length;
              const maxDirectButtons = 2;
              const showDirectly = totalDirectButtons <= maxDirectButtons;
              
              if (showDirectly) {
                // Show all additional actions directly
                return additionalActions.map((action, idx) => (
                  <Button
                    key={idx}
                    variant={action.variant || "secondaryOutline"}
                    size="sm"
                    onClick={(e) => handleAdditionalAction(e, action, item)}
                    className="!w-auto"
                  >
                    {action.icon && <action.icon className="h-4 w-4 mr-2" />}
                    {action.label}
                  </Button>
                ));
              } else {
                // Show first 2 additional actions + 3-dots for rest
                return (
                  <>
                    {additionalActions.slice(0, 2 - (onEdit ? 1 : 0) - (onDelete ? 1 : 0)).map((action, idx) => (
                      <Button
                        key={idx}
                        variant={action.variant || "secondaryOutline"}
                        size="sm"
                        onClick={(e) => handleAdditionalAction(e, action, item)}
                        className="!w-auto"
                      >
                        {action.icon && <action.icon className="h-4 w-4 mr-2" />}
                        {action.label}
                      </Button>
                    ))}
                    
                    {/* 3-dots button for remaining actions */}
                    <div className="relative">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={(e) => handleActionsModal(e, item)}
                        className="!w-auto"
                      >
                        <EllipsisVerticalIcon className="h-4 w-4" />
                      </Button>
                      
                      {/* Actions Modal */}
                      {showActionsModal && (
                        <div className="absolute right-0 z-50 bg-white rounded-lg shadow-lg border border-gray-200 py-2 min-w-[200px]">
                          <div className="px-3 py-2 text-xs text-gray-500 border-b border-gray-200">
                            Additional Actions
                          </div>
                          {additionalActions.slice(2 - (onEdit ? 1 : 0) - (onDelete ? 1 : 0)).map((action, idx) => (
                            <button
                              key={idx}
                              onClick={(e) => {
                                handleAdditionalAction(e, action, item);
                                closeActionsModal();
                              }}
                              className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
                            >
                              {action.icon && <action.icon className="h-4 w-4" />}
                              <span>{action.label}</span>
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                  </>
                );
              }
            })()}
          </div>
        )}
      </div>
    </td>
  </tr>
)}
```

### Table Selection Functionality (MANDATORY)
```jsx
// Selection State Management - MANDATORY PATTERN
const [selectedRows, setSelectedRows] = useState(new Set());

const handleSelectionChange = (newSelectedRows) => {
  setSelectedRows(newSelectedRows);
};

const handleSelectAll = () => {
  if (isAllSelected) {
    setSelectedRows(new Set());
  } else {
    const allIds = data.map((item, index) => item.id || index);
    setSelectedRows(new Set(allIds));
  }
};

const handleRowSelect = (e, rowId) => {
  e.stopPropagation();
  const newSelectedRows = new Set(selectedRows);
  if (newSelectedRows.has(rowId)) {
    newSelectedRows.delete(rowId);
  } else {
    newSelectedRows.add(rowId);
  }
  setSelectedRows(newSelectedRows);
};

// Selection State Computed Values - MANDATORY
const isAllSelected = data.length > 0 && selectedRows.size === data.length;
const isIndeterminate = selectedRows.size > 0 && selectedRows.size < data.length;
```

### Status Badges (MUST USE)
```jsx
// Status Badge - MANDATORY PATTERN
<span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
  Active
</span>

// Status Badge Variants - MANDATORY
bg-green-100 text-green-800    /* Success */
bg-red-100 text-red-800        /* Error */
bg-orange-100 text-orange-800  /* Warning */
bg-blue-100 text-blue-800      /* Info */
bg-gray-100 text-gray-800      /* Neutral */
```

---

## ü§ñ FloatingChatbot Component (MANDATORY)

### FloatingChatbot Structure (MUST USE)
```jsx
// FloatingChatbot Component - MANDATORY PATTERN
import { 
  ChatBubbleLeftRightIcon, 
  XMarkIcon, 
  PaperAirplaneIcon,
  LightBulbIcon,
  QuestionMarkCircleIcon,
  ClockIcon
} from '@heroicons/react/24/outline';

const FloatingChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: 'Hello! I\'m your Collaboright assistant. I have full knowledge about our project management system. How can I help you today?',
      isBot: true,
      timestamp: new Date(),
      sender: 'Collaboright assistant'
    }
  ]);

  const quickQuestions = [
    'How do I create a new project?',
    'What are the different user roles?',
    'How does invoicing work?'
  ];

  return (
    <>
      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-20 right-4 w-96 bg-white rounded-lg shadow-xl border border-gray-200 overflow-hidden z-80">
          {/* Header */}
          <div className="bg-gradient-to-r from-primary-600 to-primary-700 text-white p-4 flex items-center justify-center">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <ChatBubbleLeftRightIcon className="h-4 w-4 text-white" />
              </div>
              <h3 className="font-semibold text-sm">Chat Support</h3>
            </div>
          </div>

          {/* Messages */}
          <div className="h-80 overflow-y-auto p-4 space-y-3">
            {messages.map((msg) => (
              <div key={msg.id} className="space-y-2">
                {msg.isBot && (
                  <div className="flex items-center space-x-2 mb-1">
                    <span className="text-xs font-medium text-gray-600">{msg.sender}</span>
                    <div className="flex items-center space-x-1 text-xs text-gray-500">
                      <ClockIcon className="h-3 w-3" />
                      <span>{msg.timestamp.toLocaleTimeString('en-US', { 
                        hour: '2-digit', 
                        minute: '2-digit',
                        hour12: false 
                      })}</span>
                    </div>
                  </div>
                )}
                <div className={`max-w-xs px-3 py-2 rounded-lg text-sm ${
                  msg.isBot ? 'bg-gray-100 text-gray-900' : 'bg-primary-600 text-white'
                }`}>
                  {msg.text}
                </div>
              </div>
            ))}
            
            {/* Quick Questions Section */}
            {messages.length === 1 && (
              <div className="mt-4 space-y-3">
                <div className="flex items-center space-x-2">
                  <LightBulbIcon className="h-4 w-4 text-yellow-500" />
                  <span className="text-sm font-medium text-gray-700">Quick questions you can ask:</span>
                </div>
                <div className="space-y-2">
                  {quickQuestions.map((question, index) => (
                    <button
                      key={index}
                      onClick={() => handleQuickQuestion(question)}
                      className="w-full text-left p-2 bg-gray-50 hover:bg-gray-100 rounded-lg text-sm text-gray-700 flex items-center space-x-2 transition-colors"
                    >
                      <QuestionMarkCircleIcon className="h-4 w-4 text-gray-400 flex-shrink-0" />
                      <span>{question}</span>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Input */}
          <form onSubmit={handleSendMessage} className="p-4 border-t border-gray-200">
            <div className="flex space-x-2">
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Type your message..."
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
              />
              <button
                type="submit"
                className="w-10 h-10 bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white rounded-lg flex items-center justify-center transition-all duration-200 hover:scale-105"
              >
                <PaperAirplaneIcon className="h-4 w-4" />
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Chat Button - Always in bottom-right corner */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-4 right-4 w-14 h-14 bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white rounded-full shadow-lg flex items-center justify-center transition-all duration-300 hover:scale-110 z-80"
        aria-label={isOpen ? "Close chat" : "Open chat"}
      >
        {isOpen ? <XMarkIcon className="h-6 w-6" /> : <ChatBubbleLeftRightIcon className="h-6 w-6" />}
      </button>
    </>
  );
};
```

### FloatingChatbot Rules (MANDATORY)
```jsx
// Positioning Rules - MANDATORY
- Chat Window: fixed bottom-20 right-4 w-96 z-80
- Chat Button: fixed bottom-4 right-4 w-14 h-14 z-80
- NO X button in chat header - clean header design only
- X button ALWAYS in bottom-right corner (same position when open/closed)

// Styling Rules - MANDATORY
- Header: bg-gradient-to-r from-primary-600 to-primary-700
- Button: bg-gradient-to-r from-primary-600 to-primary-700
- Send Button: bg-gradient-to-r from-primary-600 to-primary-700
- Chat Window: w-96 (384px) width, h-80 (320px) message area height

// Functionality Rules - MANDATORY
- Toggle between ChatBubbleLeftRightIcon (closed) and XMarkIcon (open)
- Quick questions only show on initial load (messages.length === 1)
- Clicking quick question populates input field
- Sender name and timestamp display for bot messages
- 24-hour time format for timestamps

// Icon Usage Rules - MANDATORY
- ChatBubbleLeftRightIcon: Main chat icon and header icon
- XMarkIcon: Close button when chat is open
- PaperAirplaneIcon: Send button
- LightBulbIcon: Quick questions section
- QuestionMarkCircleIcon: Individual question buttons
- ClockIcon: Timestamp display

// State Management Rules - MANDATORY
- isOpen: Controls chat window visibility
- message: Current input value
- messages: Array of message objects with id, text, isBot, timestamp, sender
- quickQuestions: Array of predefined questions
```

### FloatingChatbot Usage Rules (MANDATORY)
```jsx
// Import Pattern - MANDATORY
import FloatingChatbot from '../components/FloatingChatbot';

// Usage Pattern - MANDATORY
<FloatingChatbot />

// Placement Rules - MANDATORY
- ALWAYS place at the end of page components
- ALWAYS use in LandingPage and other public pages
- NO additional props required
- NO customization needed - use as-is
```

---

## ‚ö†Ô∏è MANDATORY IMPLEMENTATION RULES

### 1. Button Rules (MANDATORY)
- ‚úÖ ALWAYS use the Button component
- ‚úÖ ALWAYS specify variant and size props
- ‚úÖ ALWAYS implement loading states
- ‚úÖ ALWAYS use proper touch targets (min-w-[44px] min-h-[44px])
- ‚ùå NEVER create custom button elements
- ‚ùå NEVER skip variant or size specifications

### 2. Form Rules (MANDATORY)
- ‚úÖ ALWAYS use InputFactory component
- ‚úÖ ALWAYS use SelectInput for dropdowns
- ‚úÖ ALWAYS use CurrencyInput for monetary values
- ‚úÖ ALWAYS implement proper validation
- ‚úÖ ALWAYS show error states
- ‚ùå NEVER use native HTML inputs directly
- ‚ùå NEVER skip error handling

### 3. Card Rules (MANDATORY)
- ‚úÖ ALWAYS use the specified card patterns
- ‚úÖ ALWAYS implement proper spacing and typography
- ‚úÖ ALWAYS use consistent padding values
- ‚úÖ ALWAYS implement hover states for interactive cards
- ‚ùå NEVER create custom card layouts
- ‚ùå NEVER skip consistent styling

### 4. Navigation Rules (MANDATORY)
- ‚úÖ ALWAYS use the Header and NavSidebar components
- ‚úÖ ALWAYS implement responsive behavior
- ‚úÖ ALWAYS use proper z-index values
- ‚úÖ ALWAYS implement touch targets for mobile
- ‚ùå NEVER create custom navigation elements
- ‚ùå NEVER skip responsive considerations

### 5. Interactive Element Rules (MANDATORY)
- ‚úÖ ALWAYS use the specified modal and toast patterns
- ‚úÖ ALWAYS implement proper focus management
- ‚úÖ ALWAYS use consistent animation timing
- ‚úÖ ALWAYS provide visual feedback
- ‚ùå NEVER create custom modal implementations
- ‚ùå NEVER skip accessibility considerations

---

## üìÖ Calendar Component (MANDATORY)

### Calendar Component (MUST USE)
```jsx
// Calendar Component - MANDATORY PATTERN
import { 
  ChevronLeftIcon, 
  ChevronRightIcon, 
  ChevronDownIcon,
  CalendarDaysIcon,
  ClockIcon
} from '@heroicons/react/24/outline';
import Button from './Button';

const Calendar = ({ 
  mode = 'single', // 'single', 'range', 'datetime'
  value = null,
  onChange,
  placeholder = 'Select date',
  className = '',
  disabled = false
}) => {
  // Component implementation with proper state management
  // Multiple modes: single date, date range, date with time
  // Proper accessibility and keyboard navigation
  // Responsive design with proper z-index
};
```

### Calendar Usage Patterns (MANDATORY)
```jsx
// Single Date Selection - MANDATORY
<Calendar
  mode="single"
  value={selectedDate}
  onChange={handleDateChange}
  placeholder="Select date"
/>

// Date Range Selection - MANDATORY
<Calendar
  mode="range"
  value={dateRange}
  onChange={handleRangeChange}
  placeholder="Select date range"
/>

// Date and Time Selection - MANDATORY
<Calendar
  mode="datetime"
  value={dateTime}
  onChange={handleDateTimeChange}
  placeholder="Select date and time"
/>
```

### Calendar Rules (MANDATORY)
- **Modes**: single, range, datetime
- **Icons**: CalendarDaysIcon, ChevronLeftIcon, ChevronRightIcon, ChevronDownIcon, ClockIcon
- **Positioning**: absolute top-full left-0 right-0 mt-1 z-50
- **Styling**: bg-white border border-gray-200 rounded-lg shadow-lg
- **Accessibility**: Proper ARIA labels, keyboard navigation
- **Responsive**: Works on all screen sizes
- **State Management**: Proper date handling and validation

### Calendar Structure (MANDATORY)
```jsx
// Calendar Dropdown Structure - MANDATORY PATTERN
{isOpen && (
  <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
    {/* Header with Month Navigation */}
    <div className="p-4 border-b border-gray-200">
      <div className="flex items-center justify-between">
        <button onClick={() => navigateMonth(-1)}>
          <ChevronLeftIcon className="h-4 w-4" />
        </button>
        
        {/* Month and Year Selection */}
        <div className="flex items-center space-x-2">
          <span className="text-base font-semibold text-gray-900">
            {months[currentMonth.getMonth()]}
          </span>
          <div className="relative year-dropdown-container">
            <button onClick={() => setShowYearDropdown(!showYearDropdown)}>
              <span>{currentMonth.getFullYear()}</span>
              <ChevronDownIcon className="h-4 w-4" />
            </button>
            {/* Year Dropdown */}
          </div>
        </div>
        
        <button onClick={() => navigateMonth(1)}>
          <ChevronRightIcon className="h-4 w-4" />
        </button>
      </div>
    </div>

    {/* Calendar Grid */}
    <div className="p-4">
      {/* Days of Week */}
      <div className="grid grid-cols-7 gap-1 mb-3">
        {days.map(day => (
          <div key={day} className="text-center text-sm font-semibold text-gray-600 py-2">
            {day}
          </div>
        ))}
      </div>

      {/* Calendar Days */}
      <div className="grid grid-cols-7 gap-1">
        {daysInMonth.map((date, index) => (
          <button
            key={index}
            onClick={() => handleDateClick(date)}
            className={`
              h-8 w-8 text-sm rounded-md transition-colors duration-200 flex items-center justify-center
              ${isSelected ? 'bg-primary-600 text-white font-semibold' : 
                isInRange ? 'bg-primary-100 text-primary-700 font-medium' :
                isToday ? 'bg-gray-100 text-gray-900 font-semibold' :
                'text-gray-700 hover:bg-gray-100 font-medium'}
            `}
          >
            {date.getDate()}
          </button>
        ))}
      </div>
    </div>

    {/* Time Selection (for datetime mode) */}
    {mode === 'datetime' && (
      <div className="p-4 border-t border-gray-200">
        <div className="flex items-center space-x-3">
          <ClockIcon className="h-4 w-4 text-gray-400" />
          <label className="text-sm font-medium text-gray-700">Time:</label>
          <input
            type="time"
            value={selectedTime}
            onChange={(e) => handleTimeChange(e.target.value)}
            className="px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
          />
        </div>
      </div>
    )}

    {/* Action Buttons */}
    <div className="p-4 border-t border-gray-200 flex justify-end space-x-3">
      <Button variant="secondaryOutline" size="sm" onClick={() => setIsOpen(false)}>
        Cancel
      </Button>
      {mode === 'range' && tempRange.start && !tempRange.end && (
        <Button variant="primary" size="sm" onClick={handleClear}>
          Clear
        </Button>
      )}
    </div>
  </div>
)}
```

### Calendar Input Field (MANDATORY)
```jsx
// Calendar Input Field - MANDATORY PATTERN
<button
  type="button"
  onClick={() => !disabled && setIsOpen(!isOpen)}
  disabled={disabled}
  className={`
    w-full px-3 py-2 text-left text-sm border border-gray-300 rounded-md
    focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent
    transition-colors duration-200
    ${disabled 
      ? 'bg-gray-50 text-gray-400 cursor-not-allowed' 
      : 'bg-white text-gray-900 hover:border-gray-400 cursor-pointer'
    }
  `}
>
  <div className="flex items-center justify-between">
    <span className={selectedDate || selectedRange.start ? 'text-gray-900' : 'text-gray-500'}>
      {getDisplayValue()}
    </span>
    <CalendarDaysIcon className="h-4 w-4 text-gray-400" />
  </div>
</button>
```

---

## üìÑ Pagination Component (MANDATORY)

### Pagination Component (MUST USE)
```jsx
// Pagination Component - MANDATORY PATTERN
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';

const Pagination = ({
  currentPage = 1,
  totalPages = 1,
  onPageChange,
  itemsPerPage = 10,
  totalItems = 0,
  showInfo = true
}) => {
  // Always show pagination if there are items, even for single page
  if (totalItems === 0) return null;

  const handlePrevious = () => {
    if (currentPage > 1) {
      onPageChange(currentPage - 1);
    }
  };

  const handleNext = () => {
    if (currentPage < totalPages) {
      onPageChange(currentPage + 1);
    }
  };

  return (
    <div className="flex items-center space-x-4">
      {/* Previous button */}
      <button
        onClick={handlePrevious}
        disabled={currentPage === 1}
        className="inline-flex items-center p-2 text-sm font-medium text-gray-500 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        aria-label="Previous page"
      >
        <ChevronLeftIcon className="h-4 w-4" />
      </button>
      
      {/* Current page info */}
      <span className="text-sm font-medium text-gray-700">
        {currentPage} of {totalPages}
      </span>
      
      {/* Next button */}
      <button
        onClick={handleNext}
        disabled={currentPage === totalPages}
        className="inline-flex items-center p-2 text-sm font-medium text-gray-500 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        aria-label="Next page"
      >
        <ChevronRightIcon className="h-4 w-4" />
      </button>
    </div>
  );
};
```

### Pagination Usage Patterns (MANDATORY)
```jsx
// Basic Pagination - MANDATORY
<Pagination
  currentPage={currentPage}
  totalPages={totalPages}
  onPageChange={setCurrentPage}
  itemsPerPage={itemsPerPage}
  totalItems={totalItems}
  showInfo={true}
/>

// Pagination with Data - MANDATORY
const totalPages = Math.ceil(data.length / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedData = data.slice(startIndex, endIndex);

// Pagination in Data Pages - MANDATORY
{data.length > 0 && (
  <div className="mb-4 flex justify-end">
    <Pagination
      currentPage={currentPage}
      totalPages={totalPages}
      onPageChange={setCurrentPage}
      itemsPerPage={itemsPerPage}
      totalItems={data.length}
      showInfo={true}
    />
  </div>
)}
```

### Pagination Rules (MANDATORY)
- **Icons**: ChevronLeftIcon, ChevronRightIcon
- **Positioning**: flex items-center space-x-4
- **Styling**: text-gray-500 hover:text-gray-700 with proper disabled states
- **Accessibility**: Proper ARIA labels for navigation buttons
- **State Management**: Proper page change handling
- **Conditional Rendering**: Only show if totalItems > 0
- **Layout**: Previous button, page info, next button

### Pagination Structure (MANDATORY)
```jsx
// Pagination Container - MANDATORY PATTERN
<div className="flex items-center space-x-4">
  {/* Previous Button */}
  <button
    onClick={handlePrevious}
    disabled={currentPage === 1}
    className="inline-flex items-center p-2 text-sm font-medium text-gray-500 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
    aria-label="Previous page"
  >
    <ChevronLeftIcon className="h-4 w-4" />
  </button>
  
  {/* Page Info */}
  <span className="text-sm font-medium text-gray-700">
    {currentPage} of {totalPages}
  </span>
  
  {/* Next Button */}
  <button
    onClick={handleNext}
    disabled={currentPage === totalPages}
    className="inline-flex items-center p-2 text-sm font-medium text-gray-500 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
    aria-label="Next page"
  >
    <ChevronRightIcon className="h-4 w-4" />
  </button>
</div>
```

### Pagination Integration (MANDATORY)
```jsx
// Pagination with Data Pages - MANDATORY PATTERN
// 1. Calculate pagination values
const totalPages = Math.ceil(data.length / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedData = data.slice(startIndex, endIndex);

// 2. Position pagination above table
{data.length > 0 && (
  <div className="mb-4 flex justify-end">
    <Pagination
      currentPage={currentPage}
      totalPages={totalPages}
      onPageChange={setCurrentPage}
      itemsPerPage={itemsPerPage}
      totalItems={data.length}
      showInfo={true}
    />
  </div>
)}

// 3. Use paginated data in table
<CollapsibleTable
  data={paginatedData}
  columns={columns}
  // ... other props
/>
```

### Calendar and Pagination Rules (MANDATORY)
- **ALWAYS use the specified component patterns**
- **ALWAYS implement proper accessibility**
- **ALWAYS use Heroicons for navigation**
- **ALWAYS implement proper state management**
- **ALWAYS use design system colors and spacing**
- **ALWAYS implement responsive behavior**
- **ALWAYS provide proper error handling**
- **ALWAYS use proper z-index values for dropdowns**

---

## üö® COMPLIANCE ENFORCEMENT

**AI AGENTS MUST:**
1. **Validate component usage** in every implementation
2. **Check button variants** and sizing
3. **Verify form patterns** and validation
4. **Confirm card layouts** and styling
5. **Validate navigation** responsive behavior
6. **Ensure interactive elements** follow patterns
7. **Validate calendar component** implementation and modes
8. **Check pagination component** integration and positioning

**NON-COMPLIANCE WILL RESULT IN:**
- ‚ùå Rejection of implementation
- ‚ùå Mandatory correction before proceeding
- ‚ùå Component design violation warnings

**THESE COMPONENT RULES ARE NON-NEGOTIABLE AND MUST BE FOLLOWED IN ALL IMPLEMENTATIONS.**