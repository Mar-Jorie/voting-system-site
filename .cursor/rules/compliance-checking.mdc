---
description: Systematic compliance checking to ensure all rules in .cursor/rules/ are being followed during implementation.
alwaysApply: true
---

# üîç Compliance Checking Rules

## ‚ö†Ô∏è CRITICAL: AI AGENTS MUST FOLLOW THESE COMPLIANCE RULES

**These compliance checking specifications are MANDATORY for all implementations. Deviating from these rules is NOT ALLOWED.**

---

## üéØ Step-by-Step Compliance Verification System (MANDATORY)

### DETECT-INVESTIGATE-FIX-VERIFY Process (MANDATORY)

**CRITICAL**: Compliance checking is NOT just verification - it's an active enforcement process:

1. **DETECT**: Identify violations and non-compliance issues
2. **INVESTIGATE**: Analyze root causes and specific problems
3. **FIX**: Implement corrections and solutions
4. **VERIFY**: Confirm fixes work and compliance is achieved
5. **STOP**: If any step fails, stop and fix before proceeding

**This process must be applied to EVERY compliance check.**

### Sequential Rule Verification Process (MUST FOLLOW)
```javascript
// Step-by-Step Compliance Verification - MANDATORY PATTERN
const SEQUENTIAL_COMPLIANCE_STEPS = [
  {
    step: 1,
    name: "Project Structure Compliance",
    rule: "@project-structure.mdc",
    verification: [
      "Check directory structure matches mandatory organization",
      "Verify src/api.js exists with exact implementation pattern",
      "Confirm requirements.md follows 11-section structure",
      "Validate src/index.css includes Tailwind v4 setup",
      "Check vite.config.js includes @tailwindcss/vite plugin",
      "Verify api.js file includes extracted APP_ID from human prompt",
      "Validate App ID configuration pattern: APP_ID = import.meta.env.VITE_APP_ID || 'user-provided-app-id'",
      "Confirm .env file created with VITE_APP_ID=provided-app-id",
      "Confirm App.jsx follows exact router setup pattern",
      "Validate AppProvider.jsx follows state management pattern",
      "Check AppContext.jsx follows context definition pattern",
      "Verify main.jsx follows root setup pattern",
      "Confirm portal.js includes portal system implementation",
      "Validate useScreenSize.js follows responsive hook pattern",
      "Verify authentication logic follows @rest-api-implementation.mdc patterns",
      "Confirm login/signup implementation uses JWT and MD5 patterns from rest-api"
    ],
    blocking: true // Cannot proceed without this step
  },
  {
    step: 2,
    name: "Design System Compliance",
    rule: "@design-system.mdc",
    verification: [
      "Verify typography hierarchy is implemented correctly",
      "Check spacing system follows mandatory values",
      "Validate color palette is applied throughout application",
      "Confirm component heights match specifications",
      "Check border radius values are correct",
      "Verify shadow values are used properly",
      "Validate transition classes are applied consistently"
    ],
    blocking: true
  },
  {
    step: 3,
    name: "Component Design Compliance",
    rule: "@component-design.mdc",
    verification: [
      "Verify Button component is used with proper variants",
      "Check InputFactory component is used for all inputs",
      "Validate SelectInput component is used for dropdowns",
      "Confirm Card patterns are followed correctly",
      "Check Navigation components follow mandatory patterns",
      "Verify Modal system is implemented correctly",
      "Validate Toast component is properly integrated for error handling",
      "Validate FloatingChatbot is included on all pages",
      "Check SmartFloatingActionButton is used on all pages"
    ],
    blocking: true
  },
  {
    step: 4,
    name: "Layout Structure Compliance",
    rule: "@layout-structure.mdc",
    verification: [
      "Verify MainLayout hierarchy is implemented correctly",
      "Check Header is positioned correctly (sticky top-0 z-40)",
      "Validate Sidebar is positioned correctly (fixed)",
      "Confirm Content positioning follows rules",
      "Check Z-index hierarchy is maintained",
      "Verify Touch interactions are implemented",
      "Validate Responsive behavior is correct",
      "Check Scroll ownership is managed properly"
    ],
    blocking: true
  },
  {
    step: 5,
    name: "Page Layouts Compliance",
    rule: "@page-layouts.mdc",
    verification: [
      "Verify Landing page structure is followed",
      "Check Authentication pages are structured correctly",
      "Validate Dashboard page layout is implemented",
      "Confirm Content pages follow patterns",
      "Check FloatingChatbot is placed correctly",
      "Verify No horizontal scrolling components exist"
    ],
    blocking: true
  },
  {
    step: 6,
    name: "Responsive Layout Compliance",
    rule: "@responsive-layout.mdc",
    verification: [
      "Verify Mobile-first approach is implemented",
      "Check Breakpoint system is used correctly",
      "Validate Touch interactions are on mobile only",
      "Confirm Responsive grids are implemented",
      "Check Touch targets meet requirements",
      "Verify Scrollbar hiding is applied correctly"
    ],
    blocking: true
  },
  {
    step: 7,
    name: "API Integration Compliance",
    rule: "@rest-api-implementation.mdc",
    verification: [
      "Verify API client is implemented correctly",
      "Check Authentication is handled properly",
      "Validate Error handling is implemented",
      "Confirm Retry mechanisms are in place",
      "Check Generic hooks are used",
      "Verify Innque API integration is correct"
    ],
    blocking: false
  },
  {
    step: 8,
    name: "Database Schema Compliance",
    rule: "@mcp-schema-validation.mdc",
    verification: [
      "Verify MCP database connection is working",
      "Check Existing schemas are audited",
      "Validate Required schemas are created/updated",
      "Confirm Schema permissions and ACL are set",
      "Check Schema operations are tested",
      "Verify Frontend-backend data consistency"
    ],
    blocking: false
  },
  {
    step: 9,
    name: "Testing Compliance",
    rule: "@project-testing.mdc",
    verification: [
      "Verify Puppeteer tests are implemented",
      "Check End-to-end testing is comprehensive",
      "Validate All functionality is tested",
      "Confirm Button functions are verified",
      "Check Responsive behavior is tested",
      "Verify All tests are passing"
    ],
    blocking: true
  },
  {
    step: 10,
    name: "Navigation and Data Validation Compliance",
    rule: "@page-layouts.mdc and @rest-api-implementation.mdc (AUTHORITATIVE SOURCE)",
    verification: [
      "Verify landing page buttons navigate correctly (no system page access except login)",
      "Check hero section has actual visual content (not blank container)",
      "Validate database field naming consistency between frontend and backend",
      "Confirm all pages are properly placed in sidenav navigation",
      "Check all pages are navigatable without errors",
      "Verify session implementation with proper persistence and validation",
      "Test complete navigation flow from landing page through all authenticated pages",
      "Ensure real-time data is fetched from database with correct field names"
    ],
    blocking: true
  }
];
```

### Real-Time Compliance Monitoring (MANDATORY)
```javascript
// Real-Time Compliance Monitoring - MANDATORY PATTERN
class ComplianceMonitor {
  constructor() {
    this.currentStep = 0;
    this.complianceStatus = {};
    this.blockingIssues = [];
    this.warnings = [];
  }
  
  // Check if current step can proceed
  canProceed() {
    const currentStepData = SEQUENTIAL_COMPLIANCE_STEPS[this.currentStep];
    if (!currentStepData) return true;
    
    // Check if current step is blocking
    if (currentStepData.blocking) {
      const stepStatus = this.complianceStatus[currentStepData.name];
      return stepStatus && stepStatus.status === 'passed';
    }
    
    return true;
  }
  
  // Verify current step compliance
  verifyStep(stepIndex) {
    const step = SEQUENTIAL_COMPLIANCE_STEPS[stepIndex];
    if (!step) return false;
    
    const stepResult = {
      step: step.step,
      name: step.name,
      rule: step.rule,
      status: 'pending',
      verification: step.verification.map(check => ({
        description: check,
        status: 'pending',
        details: null
      })),
      blocking: step.blocking
    };
    
    // Perform verification for each check
    stepResult.verification.forEach((check, index) => {
      const result = this.performVerification(step.rule, check.description);
      check.status = result.status;
      check.details = result.details;
    });
    
    // Update step status
    const allPassed = stepResult.verification.every(v => v.status === 'passed');
    stepResult.status = allPassed ? 'passed' : 'failed';
    
    this.complianceStatus[step.name] = stepResult;
    
    // Check for blocking issues
    if (step.blocking && stepResult.status === 'failed') {
      this.blockingIssues.push({
        step: step.step,
        name: step.name,
        rule: step.rule,
        failedChecks: stepResult.verification.filter(v => v.status === 'failed')
      });
    }
    
    return stepResult.status === 'passed';
  }
  
  // Perform individual verification
  performVerification(rule, check) {
    // This would contain the actual verification logic
    // For now, return a placeholder
    return {
      status: 'pending',
      details: `Verification for ${rule}: ${check}`
    };
  }
  
  // Get compliance report
  getComplianceReport() {
    return {
      currentStep: this.currentStep,
      canProceed: this.canProceed(),
      blockingIssues: this.blockingIssues,
      warnings: this.warnings,
      complianceStatus: this.complianceStatus,
      overallStatus: this.blockingIssues.length === 0 ? 'passed' : 'blocked'
    };
  }
}
```

## üîç Core Compliance Principles (MANDATORY)

### 1. Complete Rule Verification (MANDATORY)
- ‚úÖ ALWAYS check ALL rules in `.cursor/rules/` directory
- ‚úÖ ALWAYS verify each rule's requirements are met
- ‚úÖ ALWAYS follow the 9-step sequential compliance process
- ‚úÖ ALWAYS verify each step completely before proceeding
- ‚úÖ ALWAYS fix blocking issues before continuing
- ‚úÖ ALWAYS document compliance status for each rule and step
- ‚ùå NEVER skip any rule verification
- ‚ùå NEVER skip any compliance step
- ‚ùå NEVER proceed with blocking issues unresolved

### 2. Comprehensive Rule Coverage (MANDATORY)
```javascript
// Complete Rule Verification - MANDATORY PATTERN
const ALL_RULES_VERIFICATION = [
  '@project-structure.mdc',
  '@design-system.mdc', 
  '@component-design.mdc',
  '@layout-structure.mdc',
  '@page-layouts.mdc',
  '@responsive-layout.mdc',
  '@rest-api-implementation.mdc',
  '@mcp-tools.mdc',
  '@mcp-schema-validation.mdc',
  '@project-testing.mdc',
  '@color-palette-generation.mdc',
  '@schema-structure.mdc',
  '@mobile-implementation.mdc',
  '@project-setup.mdc',
  '@project-requirements.mdc',
  '@project-deployment.mdc',
  '@compliance-checking.mdc',
  '@orchestrator.mdc'
];

// Verify all rules are being followed
function verifyAllRules() {
  const ruleCompliance = {};
  
  ALL_RULES_VERIFICATION.forEach(rule => {
    ruleCompliance[rule] = {
      status: 'pending',
      requirements: [],
      violations: [],
      compliance: false
    };
  });
  
  return ruleCompliance;
}
```

### 3. Individual Rule Verification (MANDATORY)
```javascript
// Individual Rule Verification System - MANDATORY PATTERN
const RULE_SPECIFIC_VERIFICATION = {
  '@project-structure.mdc': {
    checks: [
      'Directory structure follows mandatory organization',
      'src/api.js exists with exact implementation pattern',
      'requirements.md follows 11-section structure',
      'src/index.css includes Tailwind v4 setup',
      'vite.config.js includes @tailwindcss/vite plugin',
      'api.js file includes extracted APP_ID from human prompt',
      'App ID configuration pattern: APP_ID = import.meta.env.VITE_APP_ID || user-provided-app-id',
      '.env file created with VITE_APP_ID=provided-app-id',
      'App.jsx follows exact router setup pattern',
      'AppProvider.jsx follows exact state management pattern',
      'AppContext.jsx follows exact context definition pattern',
      'main.jsx follows exact root setup pattern',
      'portal.js includes portal system implementation',
      'useScreenSize.js follows responsive hook pattern',
      'authentication logic follows @rest-api-implementation.mdc patterns',
      'login/signup implementation uses JWT and MD5 patterns from rest-api'
    ],
    blocking: true
  },
  
  '@design-system.mdc': {
    checks: [
      'Typography hierarchy is implemented correctly',
      'Spacing system follows mandatory values',
      'Color palette is applied throughout application',
      'Component heights match specifications',
      'Border radius values are correct',
      'Shadow values are used properly',
      'Transition classes are applied consistently'
    ],
    blocking: true
  },
  
  '@component-design.mdc': {
    checks: [
      'Button component is used with proper variants',
      'InputFactory component is used for all inputs',
      'SelectInput component is used for dropdowns',
      'Card patterns are followed correctly',
      'Navigation components follow mandatory patterns',
      'Modal system is implemented correctly',
      'Toast component is properly integrated for error handling',
      'FloatingChatbot is included on all pages',
      'SmartFloatingActionButton is used on all pages'
    ],
    blocking: true
  },
  
  '@layout-structure.mdc': {
    checks: [
      'MainLayout hierarchy is implemented correctly',
      'Header is positioned correctly (sticky top-0 z-40)',
      'Sidebar is positioned correctly (fixed)',
      'Content positioning follows rules',
      'Z-index hierarchy is maintained',
      'Touch interactions are implemented',
      'Responsive behavior is correct',
      'Scroll ownership is managed properly'
    ],
    blocking: true
  },
  
  '@page-layouts.mdc': {
    checks: [
      'Landing page structure is followed',
      'Authentication pages are structured correctly',
      'Dashboard page layout is implemented',
      'Content pages follow patterns',
      'FloatingChatbot is placed correctly',
      'No horizontal scrolling components exist'
    ],
    blocking: true
  },
  
  '@responsive-layout.mdc': {
    checks: [
      'Mobile-first approach is implemented',
      'Breakpoint system is used correctly',
      'Touch interactions are on mobile only',
      'Responsive grids are implemented',
      'Touch targets meet requirements',
      'Scrollbar hiding is applied correctly'
    ],
    blocking: true
  },
  
  '@rest-api-implementation.mdc': {
    checks: [
      'API client is implemented correctly',
      'Authentication is handled properly',
      'Error handling is implemented',
      'Retry mechanisms are in place',
      'Generic hooks are used',
      'Innque API integration is correct'
    ],
    blocking: false
  },
  
  '@mcp-schema-validation.mdc': {
    checks: [
      'MCP database connection is working',
      'Existing schemas are audited',
      'Required schemas are created/updated',
      'Schema permissions and ACL are set',
      'Schema operations are tested',
      'Frontend-backend data consistency verified'
    ],
    blocking: false
  },
  
  '@project-testing.mdc': {
    checks: [
      'Puppeteer tests are implemented',
      'End-to-end testing is comprehensive',
      'All functionality is tested',
      'Button functions are verified',
      'Responsive behavior is tested',
      'All tests are passing'
    ],
    blocking: true
  },
  
  '@color-palette-generation.mdc': {
    checks: [
      'Color palette is generated from base hex color',
      '11 shades are created correctly (25, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950)',
      'CSS variables are updated in src/index.css',
      'Tailwind configuration is updated',
      'Accessibility compliance is verified',
      'Color theory principles are applied'
    ],
    blocking: false
  },
  
  '@schema-structure.mdc': {
    checks: [
      'Field naming follows snake_case convention',
      'Field types match expected data types (String, Number, Boolean, Date, Array, Pointer, Relation, ACL)',
      'Required fields are properly defined',
      'Permission settings follow patterns',
      'Schema structure matches frontend expectations',
      'ACL configurations are correct'
    ],
    blocking: false
  },
  
  '@mobile-implementation.mdc': {
    checks: [
      'Mobile-first design approach is implemented',
      'Touch-optimized interactions are implemented',
      'Progressive enhancement from mobile to desktop',
      'Accessibility features are implemented',
      'Content-driven layout adaptation',
      'Touch targets meet minimum requirements (44px)'
    ],
    blocking: true
  },
  
  '@project-setup.mdc': {
    checks: [
      'Vite configuration is correct',
      'Tailwind CSS is properly configured',
      'PWA capabilities are implemented',
      'No PostCSS dependencies are used',
      'Official Vite plugin is used',
      'Project structure follows setup guidelines'
    ],
    blocking: true
  },
  
  '@project-requirements.mdc': {
    checks: [
      'Requirements document follows 11-section structure',
      'Domain concepts are clearly defined',
      'Data models are specified',
      'Key processes are documented',
      'Architecture intent is clear',
      'Build slices are defined'
    ],
    blocking: true
  },
  
  '@project-deployment.mdc': {
    checks: [
      'Nginx configuration is created',
      'Docker Compose setup is configured',
      'GitHub Actions CI/CD pipeline is implemented',
      'Production deployment is ready',
      'Environment variables are configured',
      'SSL/TLS configuration is included'
    ],
    blocking: false
  },
  
  '@mcp-tools.mdc': {
    checks: [
      'Schema management tools are used correctly',
      'Object management operations are implemented',
      'Proper tool input schemas are followed',
      'MCP Innque API integration is working',
      'Tool error handling is implemented',
      'Tool usage patterns are followed'
    ],
    blocking: false
  }
};

// Verify individual rule compliance
function verifyIndividualRule(ruleName) {
  const rule = RULE_SPECIFIC_VERIFICATION[ruleName];
  if (!rule) return { status: 'not_found', message: `Rule ${ruleName} not found` };
  
  const result = {
    rule: ruleName,
    status: 'pending',
    checks: rule.checks.map(check => ({
      description: check,
      status: 'pending',
      details: null
    })),
    blocking: rule.blocking
  };
  
  // Perform verification for each check
  result.checks.forEach((check, index) => {
    const verificationResult = performRuleCheck(ruleName, check.description);
    check.status = verificationResult.status;
    check.details = verificationResult.details;
  });
  
  // Update rule status
  const allPassed = result.checks.every(v => v.status === 'passed');
  result.status = allPassed ? 'passed' : 'failed';
  
  return result;
}

// Perform individual rule check
function performRuleCheck(ruleName, checkDescription) {
  // This would contain the actual verification logic for each rule
  // Implementation would check specific files, components, configurations, etc.
  return {
    status: 'pending',
    details: `Verification for ${ruleName}: ${checkDescription}`
  };
}
```

### 4. Implementation Validation (MANDATORY)
- ‚úÖ ALWAYS validate that implementations follow rule patterns
- ‚úÖ ALWAYS check that components use correct patterns
- ‚úÖ ALWAYS verify that styling follows design system
- ‚úÖ ALWAYS ensure responsive behavior is correct
- ‚ùå NEVER accept implementations that violate rules
- ‚ùå NEVER proceed with non-compliant code

### 5. Requirements Validation (MANDATORY)
- ‚úÖ ALWAYS verify all requirements from `requirements.md` are implemented
- ‚úÖ ALWAYS check that data models are created correctly
- ‚úÖ ALWAYS validate that key processes are implemented
- ‚úÖ ALWAYS ensure integrations are working
- ‚ùå NEVER skip requirements validation
- ‚ùå NEVER proceed with incomplete requirements

### 6. Testing Compliance (MANDATORY)
- ‚úÖ ALWAYS verify that all tests are implemented
- ‚úÖ ALWAYS check that tests cover all functionality
- ‚úÖ ALWAYS ensure tests are passing
- ‚úÖ ALWAYS validate that button functions work
- ‚ùå NEVER skip testing compliance
- ‚ùå NEVER proceed with failing tests

---

## üîß Implementation Verification System (MANDATORY)

### Component Verification Checklist (MUST FOLLOW)
```javascript
// Component Implementation Verification - MANDATORY PATTERN
const COMPONENT_VERIFICATION = {
  Button: {
    checks: [
      "Uses Button component (not native button elements)",
      "Specifies variant prop (primary, secondary, etc.)",
      "Specifies size prop (sm, md, lg, xl)",
      "Implements loading states with ArrowPathIcon",
      "Uses proper touch targets (min-w-[44px] min-h-[44px])",
      "Follows color palette (primary-* colors for brand elements)"
    ],
    blocking: true
  },
  
  InputFactory: {
    checks: [
      "Uses InputFactory component (not native inputs)",
      "Implements proper validation",
      "Shows error states with ExclamationCircleIcon",
      "Uses proper field configuration",
      "Handles different input types (String, Number, Boolean, Date)",
      "Implements password toggle for password fields"
    ],
    blocking: true
  },
  
  SelectInput: {
    checks: [
      "Uses SelectInput component (not native select)",
      "Implements proper options structure",
      "Handles searchable and multiple selection",
      "Shows proper placeholder text",
      "Implements proper validation"
    ],
    blocking: true
  },
  
  Card: {
    checks: [
      "Uses specified card patterns (Standard, Metric, Feature)",
      "Implements proper padding (p-4, p-5, p-6, p-8)",
      "Uses correct border radius (rounded-lg, rounded-2xl)",
      "Implements hover states for interactive cards",
      "Uses proper shadow values (shadow-sm, shadow-md)",
      "Follows typography hierarchy"
    ],
    blocking: true
  },
  
  Navigation: {
    checks: [
      "Uses Header component with proper positioning",
      "Uses NavSidebar component with responsive behavior",
      "Implements proper z-index hierarchy",
      "Uses touch targets for mobile",
      "Implements responsive dropdown behavior",
      "Uses proper icon system (Heroicons)"
    ],
    blocking: true
  },
  
  Modal: {
    checks: [
      "Uses ConfirmationModal component",
      "Implements proper portal rendering",
      "Uses correct z-index (z-50 for modal, z-40 for backdrop)",
      "Implements proper backdrop (bg-black/50)",
      "Uses Button components (not native buttons)",
      "Implements proper positioning (centered)"
    ],
    blocking: true
  },
  
  FloatingChatbot: {
    checks: [
      "Included on all pages (LandingPage, etc.)",
      "Positioned correctly (fixed bottom-4 right-4)",
      "Uses proper z-index (z-80)",
      "Implements proper toggle behavior",
      "Uses correct icon system",
      "Implements proper chat window sizing"
    ],
    blocking: true
  },
  
  Toast: {
    checks: [
      "Toast component is imported and rendered in App.jsx",
      "Uses react-hot-toast library for toast functionality",
      "Implements proper toast styling with CSS variables",
      "Configures all toast types (success, error, warning, info, loading)",
      "Uses proper positioning (top-right)",
      "Implements appropriate durations for each toast type",
      "Uses semantic colors for different toast types",
      "Provides proper icons for each toast type"
    ],
    blocking: true
  },
  
  SmartFloatingActionButton: {
    checks: [
      "Used on all pages",
      "Implements proper variant logic (single vs dots)",
      "Uses correct icon for variant",
      "Implements proper positioning (fixed bottom-6 right-6)",
      "Uses correct z-index (z-80)",
      "Implements proper quick actions expansion"
    ],
    blocking: true
  }
};
```

### Layout Verification Checklist (MUST FOLLOW)
```javascript
// Layout Implementation Verification - MANDATORY PATTERN
const LAYOUT_VERIFICATION = {
  MainLayout: {
    checks: [
      "Uses MainLayout hierarchy (Sidebar + ContentArea)",
      "Implements proper responsive behavior",
      "Manages scroll ownership correctly",
      "Uses proper z-index hierarchy",
      "Implements touch interactions on mobile",
      "Handles sidebar toggle correctly"
    ],
    blocking: true
  },
  
  Header: {
    checks: [
      "Positioned correctly (sticky top-0 z-40)",
      "Uses proper height (h-16)",
      "Implements responsive profile behavior",
      "Uses proper touch targets",
      "Implements responsive dropdown",
      "Uses correct background and borders"
    ],
    blocking: true
  },
  
  Sidebar: {
    checks: [
      "Positioned correctly (fixed left-0 top-0)",
      "Uses proper responsive widths (w-80 lg:w-[270px])",
      "Implements proper z-index (z-50 mobile, z-30 desktop)",
      "Implements touch gestures on mobile only",
      "Uses proper transform behavior",
      "Implements responsive header content",
      "Implements mobile backdrop overlay (z-40) with bg-black/50 when sidebar is open",
      "Implements touch slide functionality (swipe to open/close sidebar)",
      "Implements touch handle (40px wide invisible area on screen edge when closed)"
    ],
    blocking: true
  },
  
  Content: {
    checks: [
      "Uses proper responsive margins",
      "Implements proper width calculations",
      "Uses correct padding (p-6)",
      "Implements proper scroll behavior",
      "Uses correct background (bg-gray-50)",
      "Handles responsive content adaptation"
    ],
    blocking: true
  }
};
```

### Page Verification Checklist (MUST FOLLOW)
```javascript
// Page Implementation Verification - MANDATORY PATTERN
const PAGE_VERIFICATION = {
  LandingPage: {
    checks: [
      "Uses proper navigation structure",
      "Implements hero section with gradient background",
      "Uses correct grid layouts for features",
      "Implements CTA section with gradient",
      "Includes FloatingChatbot",
      "Uses proper responsive typography",
      "Implements mobile button behavior (one row)"
    ],
    blocking: true
  },
  
  AuthenticationPages: {
    checks: [
      "Centers forms vertically and horizontally",
      "Includes back to home button",
      "Uses proper form container styling",
      "Implements proper form validation",
      "Uses Button components with loading states",
      "Implements social auth grid layout"
    ],
    blocking: true
  },
  
  DashboardPage: {
    checks: [
      "Uses proper page header structure",
      "Implements metric cards grid layout",
      "Uses correct content section layouts",
      "Includes SmartFloatingActionButton",
      "Uses proper card headers with icons",
      "Implements proper spacing and typography"
    ],
    blocking: true
  },
  
  DataPages: {
    checks: [
      "Uses SearchFilter component",
      "Implements CollapsibleTable",
      "Uses proper responsive table behavior",
      "Implements proper action buttons",
      "Uses correct mobile column hiding",
      "Implements proper expandable content"
    ],
    blocking: true
  }
};
```

### Responsive Verification Checklist (MUST FOLLOW)
```javascript
// Responsive Implementation Verification - MANDATORY PATTERN
const RESPONSIVE_VERIFICATION = {
  MobileFirst: {
    checks: [
      "Starts with mobile styles (no prefixes)",
      "Uses responsive prefixes (md:, lg:)",
      "Implements progressive enhancement",
      "Uses proper breakpoint values",
      "Tests across all breakpoints"
    ],
    blocking: true
  },
  
  TouchInteractions: {
    checks: [
      "Implements touch gestures on mobile only",
      "Provides touch targets ‚â• 44px",
      "Adds touch-manipulation class",
      "Implements proper touch feedback",
      "Uses proper touch handle positioning"
    ],
    blocking: true
  },
  
  LayoutBehavior: {
    checks: [
      "Implements mobile overlay mode",
      "Implements desktop push mode",
      "Uses responsive width values",
      "Implements proper state management",
      "Handles responsive layout changes"
    ],
    blocking: true
  },
  
  ContentAdaptation: {
    checks: [
      "Implements responsive typography",
      "Implements responsive spacing",
      "Implements responsive grids",
      "Maintains visual hierarchy",
      "Uses responsive alternatives for fixed sizes"
    ],
    blocking: true
  }
};
```

## üö® COMPLIANCE ENFORCEMENT

### Comprehensive Compliance Enforcement (MANDATORY)
```javascript
// Comprehensive Compliance Enforcement - MANDATORY PATTERN
function enforceCompliance() {
  const enforcementSteps = [
    {
      step: 1,
      action: "Verify ALL Rules Compliance",
      check: () => verifyAllRulesCompliance(),
      blocking: true,
      message: "ALL rules must be compliant before proceeding"
    },
    {
      step: 2,
      action: "Verify Sequential Steps",
      check: () => verifySequentialSteps(),
      blocking: true,
      message: "Sequential compliance steps must be completed"
    },
    {
      step: 3,
      action: "Verify Individual Rules",
      check: () => verifyIndividualRules(),
      blocking: true,
      message: "Individual rule compliance must be verified"
    },
    {
      step: 4,
      action: "Verify Component Implementation",
      check: () => verifyComponentImplementation(),
      blocking: true,
      message: "Component implementation must be compliant before proceeding"
    },
    {
      step: 5,
      action: "Verify Layout Structure",
      check: () => verifyLayoutStructure(),
      blocking: true,
      message: "Layout structure must be compliant before proceeding"
    },
    {
      step: 6,
      action: "Verify Page Implementation",
      check: () => verifyPageImplementation(),
      blocking: true,
      message: "Page implementation must be compliant before proceeding"
    },
    {
      step: 7,
      action: "Verify Responsive Behavior",
      check: () => verifyResponsiveBehavior(),
      blocking: true,
      message: "Responsive behavior must be compliant before proceeding"
    },
    {
      step: 8,
      action: "Verify API Integration",
      check: () => verifyAPIIntegration(),
      blocking: false,
      message: "API integration should be compliant"
    },
    {
      step: 9,
      action: "Verify Database Schema",
      check: () => verifyDatabaseSchema(),
      blocking: false,
      message: "Database schema should be compliant"
    },
    {
      step: 10,
      action: "Verify Testing Implementation",
      check: () => verifyTestingImplementation(),
      blocking: true,
      message: "Testing implementation must be compliant before proceeding"
    }
  ];
  
  return enforcementSteps;
}

// Verify all rules compliance
function verifyAllRulesCompliance() {
  const allRules = ALL_RULES_VERIFICATION;
  const complianceResults = {};
  
  allRules.forEach(rule => {
    complianceResults[rule] = verifyIndividualRule(rule);
  });
  
  const blockingRules = Object.values(complianceResults).filter(
    result => result.blocking && result.status !== 'passed'
  );
  
  return {
    status: blockingRules.length === 0 ? 'passed' : 'failed',
    results: complianceResults,
    blockingIssues: blockingRules
  };
}

// Verify sequential steps
function verifySequentialSteps() {
  const sequentialResults = {};
  
  SEQUENTIAL_COMPLIANCE_STEPS.forEach(step => {
    sequentialResults[step.name] = verifyStep(step.step - 1);
  });
  
  const blockingSteps = Object.values(sequentialResults).filter(
    result => result.blocking && result.status !== 'passed'
  );
  
  return {
    status: blockingSteps.length === 0 ? 'passed' : 'failed',
    results: sequentialResults,
    blockingIssues: blockingSteps
  };
}

// Verify individual rules
function verifyIndividualRules() {
  const individualResults = {};
  
  Object.keys(RULE_SPECIFIC_VERIFICATION).forEach(rule => {
    individualResults[rule] = verifyIndividualRule(rule);
  });
  
  const blockingRules = Object.values(individualResults).filter(
    result => result.blocking && result.status !== 'passed'
  );
  
  return {
    status: blockingRules.length === 0 ? 'passed' : 'failed',
    results: individualResults,
    blockingIssues: blockingRules
  };
}
```

**AI AGENTS MUST:**
1. **DETECT**: Check ALL rules in `.cursor/rules/` directory for violations
2. **INVESTIGATE**: Analyze specific violations and root causes
3. **FIX**: Implement corrections for all detected violations
4. **VERIFY**: Confirm all fixes work and compliance is achieved
5. **STOP**: If any compliance check fails, stop and fix before proceeding
6. **REPORT**: Document all violations found and fixes applied

**ENFORCEMENT ACTIONS:**
- **DETECT**: Identify specific rule violations (e.g., "Component X uses hardcoded data instead of database")
- **INVESTIGATE**: Analyze root cause (e.g., "Component X is not connected to API client")
- **FIX**: Implement solution (e.g., "Connect Component X to database API calls")
- **VERIFY**: Test fix (e.g., "Confirm Component X now fetches real data from database")
- **STOP**: If fix fails, stop and investigate further

**NON-COMPLIANCE WILL RESULT IN:**
- ‚ùå **IMMEDIATE STOP** of implementation
- ‚ùå **MANDATORY CORRECTION** of all violations
- ‚ùå **DETAILED INVESTIGATION** of root causes
- ‚ùå **COMPREHENSIVE FIXING** of all issues
- ‚ùå **VERIFICATION** of all fixes before proceeding

**THESE COMPLIANCE CHECKING RULES ARE NON-NEGOTIABLE AND MUST BE FOLLOWED IN ALL IMPLEMENTATIONS.**