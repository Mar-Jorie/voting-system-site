---
description: MANDATORY layout positioning and structure rules that AI agents MUST follow for Header, Sidebar, MainLayout, and content positioning across all devices.
alwaysApply: true
---

# üèóÔ∏è Layout Structure Rules (MANDATORY)

## ‚ö†Ô∏è CRITICAL: AI AGENTS MUST FOLLOW THESE LAYOUT RULES

**These layout positioning specifications are MANDATORY for all implementations. Deviating from these rules is NOT ALLOWED.**

---

## üìê MainLayout Structure (MANDATORY)

### Layout Hierarchy (MUST FOLLOW)
```jsx
// MainLayout Structure - MANDATORY PATTERN (Matches current codebase)
<MainLayout>
  <Sidebar />          // fixed positioning with responsive behavior
  <ContentArea>        // contains Header and Main content
    <Header />         // sticky top-0 z-40 (FIXED - NO SCROLLING)
    <MainContent />    // scrollable content area with proper height constraints
  </ContentArea>
</MainLayout>
```

### MainLayout Container (MANDATORY)
```jsx
// MainLayout Container - MANDATORY with Context Integration
import { createContext, useContext, useState, useEffect } from 'react';
import { useScreenSize } from '../hooks/useScreenSize';
import Sidebar from '../components/layout/Sidebar';
import Header from '../components/layout/Header';

const MainLayoutContext = createContext();

const MainLayout = ({ children }) => {
  const { isMobile, isDesktop } = useScreenSize();
  const [show, setShow] = useState(!isMobile);

  // Set initial sidebar state based on screen size
  useEffect(() => {
    if (isMobile) {
      setShow(false); // Mobile: start closed
    } else {
      setShow(true); // Desktop: start open
    }
  }, [isMobile]);

  // Add/remove body class to control scrolling behavior
  useEffect(() => {
    document.body.classList.add('main-layout-active');
    return () => {
      document.body.classList.remove('main-layout-active');
    };
  }, []);

  return (
    <MainLayoutContext.Provider value={{ show, setShow, isMobile, isDesktop }}>
      <div className="min-h-screen bg-gray-50">
        {/* Sidebar - Fixed positioned, doesn't affect layout flow */}
        <Sidebar 
          show={show}
          onSetShow={setShow}
          position="left"
        />

        {/* Content Area - Properly positioned relative to sidebar */}
        <div 
          className="flex flex-col overflow-hidden transition-all duration-300 ease-in-out"
          style={{
            marginLeft: isDesktop && show ? '270px' : '0px',
            width: isDesktop && show ? 'calc(100vw - 270px)' : '100vw',
            height: '100vh',
            position: 'relative' // Ensure proper positioning context
          }}
        >
          {/* Header - Sticky positioned within content area */}
          <Header />

          {/* Main Content - Scrollable area */}
          <main className="flex-1 overflow-y-auto scrollbar-hide">
            <div className="w-full max-w-full overflow-x-hidden p-6">
              {children}
            </div>
          </main>
        </div>
      </div>
    </MainLayoutContext.Provider>
  );
};

MainLayout.Context = MainLayoutContext;
export default MainLayout;
```

### MainLayout Usage Rules (MANDATORY)
```jsx
// CRITICAL: MainLayout MUST be used at the App level, NOT in individual pages
// This prevents Header from refreshing on route changes

// CORRECT - App.jsx structure:
<AppProvider>
  <Router>
    <MainLayout>
      <Routes>
        <Route path="/dashboard" element={<DashboardPage />} />
        <Route path="/websites" element={<WebsitesPage />} />
        {/* Other routes */}
      </Routes>
    </MainLayout>
  </Router>
</AppProvider>

// INCORRECT - Individual pages with MainLayout:
// DashboardPage.jsx should NOT include <MainLayout>
// WebsitesPage.jsx should NOT include <MainLayout>
```

### Layout Positioning Explanation (MANDATORY)
```jsx
// CRITICAL: Understanding the layout positioning system

// 1. Sidebar Positioning
- Position: fixed left-0 top-0 (taken out of normal document flow)
- Mobile: z-index 50 (overlay mode)
- Desktop: z-index 30 (push mode)
- Width: 320px mobile, 270px desktop
- Transform: translateX(-100%) when closed, translateX(0%) when open

// 2. Content Area Positioning
- Position: relative (creates positioning context)
- Margin: marginLeft adjusts based on sidebar state
- Mobile: marginLeft: 0px (sidebar overlays)
- Desktop: marginLeft: 270px when open, 0px when closed
- Width: calc(100vw - 270px) when sidebar open, 100vw when closed
- Height: 100vh (full viewport height)

// 3. Header Positioning
- Position: sticky top-0 z-40 (sticks to top of content area)
- Height: h-16 (64px)
- Background: bg-white with border and shadow
- Stays within content area bounds

// 4. Main Content Positioning
- Position: flex-1 (takes remaining space in content area)
- Overflow: overflow-y-auto scrollbar-hide (scrollable)
- Padding: p-6 (24px)
- Width: w-full max-w-full overflow-x-hidden

// 5. Layout Flow
- Sidebar: Fixed positioned, doesn't affect content flow
- Content Area: Adjusts margin/width based on sidebar state
- Header: Sticky within content area
- Main: Scrollable within remaining content area space
```

### MainLayout Body Class Management (MANDATORY)
```jsx
// MainLayout MUST add/remove body class to control scrolling behavior
// This ensures proper scroll ownership between public and app pages

// Add/remove body class to control scrolling
useEffect(() => {
  document.body.classList.add('main-layout-active');
  return () => {
    document.body.classList.remove('main-layout-active');
  };
}, []);

// This prevents body scrolling on MainLayout pages
// while allowing body scrolling on public pages (landing, signin, signup)
```

---

## üì± Header Positioning (MANDATORY)

### Header Structure (MUST FOLLOW)
```jsx
// Header Component - MANDATORY PATTERN (Matches current codebase)
import { 
  Bars3Icon, 
  BellIcon, 
  ChevronDownIcon, 
  UserIcon, 
  QuestionMarkCircleIcon, 
  ArrowRightOnRectangleIcon 
} from '@heroicons/react/24/outline';

const Header = ({ onToggleSidebar }) => {
  // ... component logic ...

  return (
    <header className="sticky top-0 z-40 h-16 bg-white border-b border-gray-200 shadow-card">
      <div className="flex items-center justify-between h-full px-4 sm:px-6">
        {/* Left: Hamburger Menu */}
        <div className="flex items-center">
          <button
            onClick={onToggleSidebar}
            className="p-3 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors touch-manipulation relative z-50 min-w-[44px] min-h-[44px]"
            aria-label="Toggle sidebar"
          >
            <Bars3Icon className="h-6 w-6" />
          </button>
        </div>
        
        {/* Center: Empty - Logo Removed */}
        <div className="flex-1 flex justify-center">
          {/* Logo removed per user request */}
        </div>
        
        {/* Right: Notifications and Profile */}
        <div className="flex items-center space-x-2">
      {/* Notifications */}
      <button className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors relative min-w-[44px] min-h-[44px] flex items-center justify-center">
        <BellIcon className="h-6 w-6" />
        <span className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center">
          3
        </span>
      </button>

      {/* Profile Dropdown - Responsive Content */}
      <div className="relative">
        <button
          onClick={handleProfileClick}
          className="flex items-center space-x-2 p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors min-w-[44px] min-h-[44px]"
        >
          <div className="w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-semibold shadow-sm">
            {getInitials(getUserDisplayName(user))}
          </div>
          {/* Desktop: Show name and role */}
          <div className="hidden lg:block text-left">
            <div className="text-sm font-medium text-gray-900">
              {getUserDisplayName(user) || 'User'}
            </div>
            <div className="text-xs text-gray-500">
              {getUserRoleName(user) || 'Role'}
            </div>
          </div>
          <ChevronDownIcon className="h-4 w-4 transition-transform duration-200" />
        </button>

        {/* Profile Dropdown Menu - MANDATORY RESPONSIVE PATTERN */}
        {showProfileDropdown && (
          <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50">
            {/* Desktop: View Profile + Help only */}
            <div className="hidden lg:block">
              <button 
                className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
                onClick={() => handleProfileAction('profile')}
              >
                <UserIcon className="h-4 w-4 text-gray-400" />
                <span>View Profile</span>
              </button>
              <button 
                className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
                onClick={() => handleProfileAction('help')}
              >
                <QuestionMarkCircleIcon className="h-4 w-4 text-gray-400" />
                <span>Help & Support</span>
              </button>
            </div>
            
            {/* Mobile: View Profile + Help + Logout */}
            <div className="lg:hidden">
              <button 
                className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
                onClick={() => handleProfileAction('profile')}
              >
                <UserIcon className="h-4 w-4 text-gray-400" />
                <span>View Profile</span>
              </button>
              <button 
                className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
                onClick={() => handleProfileAction('help')}
              >
                <QuestionMarkCircleIcon className="h-4 w-4 text-gray-400" />
                <span>Help & Support</span>
              </button>
              <div className="border-t border-gray-100 my-1"></div>
              <button 
                className="w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2"
                onClick={() => setShowLogoutConfirm(true)}
              >
                <ArrowRightOnRectangleIcon className="h-4 w-4 text-red-400" />
                <span>Sign Out</span>
              </button>
            </div>
        </div>
        )}
      </div>
    </div>
  </div>

  {/* Sign Out Confirmation Modal */}
  <ConfirmationModal
    isOpen={showLogoutConfirm}
    onClose={() => setShowLogoutConfirm(false)}
    onConfirm={handleLogout}
    title="Sign out"
    message="Are you sure you want to sign out?"
    confirmLabel="Sign out"
    cancelLabel="Cancel"
    icon="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.502 0L4.318 18.5c-.77.833.192 2.5 1.732 2.5z"
    iconColor="text-red-600"
    iconBgColor="bg-red-100"
  />
    </header>
```

### Header Rules (MANDATORY)
- **Position**: sticky top-0 z-40 h-16
- **Background**: bg-white border-b border-gray-200
- **Mobile**: Profile shows avatar only, logout in dropdown
- **Desktop**: Profile shows avatar + name + role, no logout in header
- **Touch targets**: min-w-[44px] min-h-[44px]
- **Responsive dropdown**: Different content for mobile vs desktop

### Hamburger Menu Functionality (MANDATORY)
```jsx
// CRITICAL: Hamburger menu MUST work on ALL devices with complete functionality

// 1. Click Functionality (ALL DEVICES)
- Hamburger button MUST be clickable on desktop, tablet, and mobile
- onClick handler MUST toggle sidebar state via MainLayout.Context
- Button MUST have proper touch targets (min-w-[44px] min-h-[44px])

// 2. Touch Slide Functionality (MOBILE ONLY)
- Touch handle: 40px wide invisible area on screen edge when sidebar closed
- Swipe from edge: Opens sidebar with smooth animation
- Swipe anywhere when open: Closes sidebar
- Drag distance: 30px threshold to trigger open/close
- Smooth animations: requestAnimationFrame for 60fps performance

// 3. Responsive Behavior
- Mobile: Overlay mode (z-index: 50) with touch gestures + click
- Desktop: Push mode (z-index: 30) with click only (no touch gestures)
- Auto-close: On navigation click for mobile devices
- State persistence: Respects user toggle state on desktop

// 4. Context Integration
- Header MUST use MainLayout.Context to access { show, setShow }
- Sidebar state MUST be managed through context
- All components MUST share the same sidebar state
```

### Header Profile Dropdown Responsive (MANDATORY)
```jsx
// Profile Dropdown - MANDATORY RESPONSIVE PATTERN
{showProfileDropdown && (
  <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50">
    {/* Desktop: View Profile + Help only */}
    <div className="hidden lg:block">
      <button className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2">
        <UserIcon className="h-4 w-4 text-gray-400" />
        <span>View Profile</span>
      </button>
      <button className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2">
        <QuestionMarkCircleIcon className="h-4 w-4 text-gray-400" />
        <span>Help & Support</span>
      </button>
    </div>
    
    {/* Mobile: View Profile + Help + Logout */}
    <div className="lg:hidden">
      <button className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2">
        <UserIcon className="h-4 w-4 text-gray-400" />
        <span>View Profile</span>
      </button>
      <button className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2">
        <QuestionMarkCircleIcon className="h-4 w-4 text-gray-400" />
        <span>Help & Support</span>
      </button>
      <div className="border-t border-gray-100 my-1"></div>
      <button className="w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2">
        <ArrowRightOnRectangleIcon className="h-4 w-4 text-red-400" />
        <span>Sign Out</span>
      </button>
    </div>
  </div>
)}
```

---

## üéØ Sidebar Positioning (MANDATORY)

### Sidebar Structure (MUST FOLLOW)
```jsx
// Sidebar Component - MANDATORY PATTERN (Matches current codebase)
<Sidebar show={show} onSetShow={setShow} position="left">
  <NavSidebar 
    isMobile={isMobile} 
    setShow={setShow}
  />
</Sidebar>
```

### Sidebar Positioning Rules (MANDATORY)
```css
/* Mobile Sidebar Positioning - MANDATORY */
position: fixed
left: 0
top: 0
height: 100vh
width: 320px (w-80 max-w-[80vw])
z-index: 50
transform: translateX(-100%) when closed
transform: translateX(0%) when open
transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1)

/* Desktop Sidebar Positioning - MANDATORY */
position: fixed
left: 0
top: 0
height: 100vh
width: 270px (lg:w-[270px])
z-index: 30
transform: translateX(0%) when open
transform: translateX(-100%) when closed
transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1)
```

### Sidebar Responsive Behavior (MANDATORY)
```jsx
// Mobile Behavior - MANDATORY
- Overlay mode (z-index: 50)
- Touch gestures enabled
- Backdrop overlay when open
- Touch handle on screen edge when closed
- Auto-close on navigation click

// Desktop Behavior - MANDATORY
- Push mode (z-index: 30)
- No touch gestures
- No backdrop overlay
- Toggleable when open (user can close/open)
- No auto-close on navigation
- NO forced show behavior - respect user toggle state
```

### Desktop Sidebar Toggle Rules (MANDATORY)
```jsx
// CRITICAL: Desktop sidebar MUST respect user toggle state
// DO NOT force sidebar to always show on desktop

// CORRECT - Respect user state (Matches current codebase):
const [showSidebar, setShowSidebar] = useState(true); // Start with sidebar open

// Set initial sidebar state based on screen size
useEffect(() => {
  if (isMobile) {
    setShowSidebar(false); // Mobile: start closed
  } else {
    setShowSidebar(true); // Desktop: start open
  }
}, [isMobile]);

// INCORRECT - Force show on desktop:
// useEffect(() => {
//   if (isDesktop) {
//     onSetShow?.(true); // This breaks toggle functionality
//   }
// }, [isDesktop, onSetShow]);
```

---

## üéØ NavSidebar Positioning (MANDATORY)

### NavSidebar Structure (MUST FOLLOW)
```jsx
// NavSidebar Component - MANDATORY PATTERN (Matches current codebase)
import { 
  HomeIcon, 
  GlobeAltIcon, 
  DocumentTextIcon, 
  ChartBarIcon, 
  CogIcon, 
  ArrowRightOnRectangleIcon 
} from '@heroicons/react/24/outline';

<div className="bg-white border-r border-gray-200 h-full w-80 max-w-[80vw] lg:w-[270px]">
  <div className="flex flex-col h-full">
    {/* Header Section - Responsive */}
    <div className="flex flex-col p-6 border-b border-gray-200">
      {/* Mobile: User Profile */}
      <div className="lg:hidden">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-primary-600 rounded-full flex items-center justify-center text-white text-lg font-medium">
            {getInitials(getUserDisplayName(user))}
          </div>
          <div>
            <h1 className="text-base font-medium text-gray-900">
              {getUserDisplayName(user)}
            </h1>
            <p className="text-xs text-gray-500">
              {getUserRoleName(user)}
            </p>
          </div>
        </div>
      </div>

      {/* Desktop: System Logo and Name */}
      <div className="hidden lg:block">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 flex items-center justify-center">
            <img src="/Logo.png" alt="Logo" className="w-6 h-6 object-contain" />
          </div>
          <div>
            <h1 className="text-base font-medium text-gray-900">
              System Name
            </h1>
            <p className="text-xs text-gray-500">
              Project Management
            </p>
          </div>
        </div>
      </div>
    </div>
    
    {/* Navigation */}
    <nav className="flex-1 px-4 py-6 space-y-2 overflow-y-auto scrollbar-hide">
      {navigationItems.map((item) => (
        <Link
          key={item.name}
          to={item.href}
          onClick={handleNavClick}
          className={`group flex items-center px-4 py-3 text-sm font-medium rounded-md transition-colors duration-200 ${
            item.current
              ? 'bg-primary-50 text-primary-700 border-l-2 border-primary-600'
              : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
          }`}
        >
          <item.icon className={`h-5 w-5 flex-shrink-0 mr-3 ${
            item.current ? 'text-primary-600' : 'text-gray-400 group-hover:text-gray-500'
          }`} />
          <span className="truncate">{item.name}</span>
        </Link>
      ))}
    </nav>
    
    {/* Footer - Logout button */}
    <div className="p-4 border-t border-gray-200">
      <Button
        onClick={handleLogoutClick}
        variant="primaryOutline"
        size="md"
        className="w-full"
      >
        <ArrowRightOnRectangleIcon className="h-5 w-5 mr-2" />
        Sign Out
      </Button>
    </div>
  </div>

  {/* Sign Out Confirmation Modal */}
  <ConfirmationModal
    isOpen={showLogoutConfirm}
    onClose={() => setShowLogoutConfirm(false)}
    onConfirm={handleLogout}
    title="Sign out"
    message="Are you sure you want to sign out?"
    confirmLabel="Sign out"
    cancelLabel="Cancel"
    icon="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.502 0L4.318 18.5c-.77.833.192 2.5 1.732 2.5z"
    iconColor="text-red-600"
    iconBgColor="bg-red-100"
  />
</div>
```

### NavSidebar Responsive Behavior (MANDATORY)
```jsx
// Mobile NavSidebar - MANDATORY
- Width: w-80 max-w-[80vw] (320px max, 80% viewport)
- Header: User profile (lg:hidden)
- Auto-close: setShow(false) on navigation click
- Touch-friendly: All interactive elements ‚â• 44px

// Desktop NavSidebar - MANDATORY
- Width: lg:w-[270px] (270px fixed)
- Header: System branding (hidden lg:block)
- No auto-close: Sidebar stays open
- Mouse-friendly: Standard hover states
```

---

## üì± Content Positioning (MANDATORY)

### Content Area Rules (MUST FOLLOW)
```jsx
// Content Positioning - UPDATED MANDATORY
// Content is now handled within MainLayout container
// Individual pages should NOT wrap content in additional containers
// Pages should render content directly as children of MainLayout
```

### System Scroll Ownership (REQUIRED)
```css
/* Scroll behavior: Public pages use body scroll, MainLayout pages use main content scroll */
html, body, #root {
  height: 100%;
}
body {
  overflow-x: hidden; /* Prevent horizontal scroll */
  overflow-y: auto; /* Allow vertical scroll for public pages */
}

/* MainLayout pages should not have body scroll */
body.main-layout-active {
  overflow-y: hidden; /* Prevent body scroll when MainLayout is active */
}

/* The scrollable container MUST be the main element with overflow-y-auto + scrollbar-hide */
/* To ensure scroll in all browsers (including Safari), set main height: calc(100vh - headerHeight). */
```

### Page Scroll Rules (MANDATORY)
```jsx
// Landing Page - MANDATORY
- Container: min-h-screen bg-white (body handles scrolling)
- Navigation: sticky top-0 z-40
- Content: Normal flow with natural body scrolling

// Authentication Pages - MANDATORY
- Container: min-h-screen bg-gray-50 flex items-center justify-center py-8 px-4 sm:px-6 lg:px-8 (body handles scrolling)
- Form: Centered with natural body scrolling when content exceeds viewport
- Back button: absolute top-6 left-6

// Dashboard/App Pages - MANDATORY
- Container: Uses MainLayout with proper scroll management
- Header: sticky top-0 z-40 (no scroll)
- Main content: flex-1 overflow-y-auto scrollbar-hide (main content area scrolls)
- Sidebar: fixed positioning (no scroll)
- Body: overflow-y: hidden (prevented by main-layout-active class)
```

### Scrollbar Policy (MUST FOLLOW)
```css
/* Global Scrollbar Hiding - MANDATORY */
/* Apply in global stylesheet (e.g., src/index.css) */

/* Hide scrollbars cross-browser while preserving scroll */
.scrollbar-hide {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}
.scrollbar-hide::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

/* Required containers MUST include scrollbar-hide when overflow-y-auto is used */
/* Examples: main content, NavSidebar nav, filter panels, dropdown menus */
```

### Content Responsive Behavior (MANDATORY)
```jsx
// Mobile Content - MANDATORY
- No margin (sidebar overlays)
- Full width (100vw)
- Standard padding (p-6)
- Scrollable main content area
- Header fixed at top

// Desktop Content - MANDATORY
- Sidebar pushes content (flexbox layout)
- Width adjusts automatically via flex-1
- Standard padding (p-6)
- Scrollable main content area
- Header remains fixed at top (no margin adjustments)
```

---

## üéØ Z-Index Hierarchy (MANDATORY)

### Z-Index Layers (MUST FOLLOW)
```css
/* Z-Index Hierarchy - MANDATORY */
z-30: Sidebar (desktop only)
z-40: Header (all devices), Mobile Backdrop
z-50: Sidebar (mobile), Modals, Dropdowns
z-60: Tooltips
z-70: Toasts
z-80: Floating elements (FAB, Chatbot) // FAB must always appear above content and below modals
```

### Z-Index Usage Rules (MANDATORY)
```jsx
// Header Z-Index - MANDATORY
<header className="sticky top-0 z-40">

// Mobile Backdrop Z-Index - MANDATORY
<div className="fixed inset-0 z-40">

// Sidebar Z-Index - MANDATORY
<div className="fixed top-0 h-full z-50 lg:z-30">

// Modal Z-Index - MANDATORY
<div className="fixed inset-0 z-50">

// Toast Z-Index - MANDATORY
<div className="fixed top-4 right-4 z-70">
```

---

## üì± Touch Interactions (MANDATORY)

### Touch Gestures (MOBILE ONLY)
```jsx
// Touch Handle - MANDATORY (Mobile Only) (Matches current codebase)
{isMobile && !show && (
  <div 
    className="fixed top-0 bottom-0 z-30 touch-manipulation left-0" 
    style={{ width: 40 }} 
  />
)}

// Touch Behavior - MANDATORY (Matches current codebase)
- Drag distance: 50px threshold
- Touch handle: 40px wide on screen edge
- Smooth animations: requestAnimationFrame
- Edge detection: Only near screen edge when closed
- Auto-close: setShow(false) on navigation click
```

### Touch Targets (MANDATORY)
```css
/* Touch Target Rules - MANDATORY */
min-w-[44px] min-h-[44px]  /* All interactive elements */
touch-manipulation          /* Touch optimization */
```

---

## üéØ Backdrop and Overlay (MANDATORY)

### Mobile Backdrop (MANDATORY)
```jsx
// Mobile Backdrop - MANDATORY (Mobile Only)
{isMobile && (
  <div
    className={`fixed inset-0 z-40 transition-all duration-300 ease-in-out bg-black/50 ${
      show ? 'opacity-100 visible' : 'opacity-0 invisible'
    }`}
    style={{
      pointerEvents: show ? 'auto' : 'none'
    }}
    onClick={() => onSetShow?.(false)}
  />
)}
```

### Touch Slide Functionality (MANDATORY)
**Note: For complete touch slide implementation details, see `@mobile-implementation.mdc`**

```jsx
// Touch Handle - MANDATORY (Mobile Only)
{isMobile && !show && (
  <div 
    className="fixed top-0 bottom-0 z-30 touch-manipulation left-0" 
    style={{ width: 40 }} 
    onTouchStart={handleTouchStart} 
  />
)}

// Touch Behavior - MANDATORY (Mobile Only)
- Touch handle: 40px wide invisible area on screen edge when sidebar closed
- Swipe from edge: Opens sidebar with smooth animation
- Swipe anywhere when open: Closes sidebar
- Drag distance: 30px threshold to trigger open/close
- Smooth animations: requestAnimationFrame for 60fps performance
```

### Desktop Behavior (MANDATORY)
```jsx
// Desktop - MANDATORY
- No backdrop overlay
- No touch gestures
- Push layout only
- No auto-close behavior
```

---

## ‚ö†Ô∏è MANDATORY IMPLEMENTATION RULES

### 1. Layout Structure Rules (MANDATORY)
- ‚úÖ ALWAYS use the MainLayout hierarchy
- ‚úÖ ALWAYS position Header as sticky top-0 z-40
- ‚úÖ ALWAYS position Sidebar as fixed with responsive z-index
- ‚úÖ ALWAYS implement responsive content margin behavior
- ‚ùå NEVER change the z-index hierarchy
- ‚ùå NEVER skip the MainLayout wrapper

### 2. Responsive Behavior Rules (MANDATORY)
- ‚úÖ ALWAYS implement mobile overlay mode
- ‚úÖ ALWAYS implement desktop push mode
- ‚úÖ ALWAYS use responsive width values (w-80 lg:w-[270px])
- ‚úÖ ALWAYS implement touch gestures on mobile only
- ‚ùå NEVER mix mobile and desktop behaviors
- ‚ùå NEVER skip responsive breakpoints

### 3. Positioning Rules (MANDATORY)
- ‚úÖ ALWAYS use fixed positioning for Sidebar
- ‚úÖ ALWAYS use sticky positioning for Header
- ‚úÖ ALWAYS implement proper transform behavior
- ‚úÖ ALWAYS use correct z-index values
- ‚ùå NEVER use absolute positioning for main layout elements
- ‚ùå NEVER use incorrect z-index values

### 4. Touch Interaction Rules (MANDATORY)
- ‚úÖ ALWAYS implement touch targets ‚â• 44px
- ‚úÖ ALWAYS add touch-manipulation class
- ‚úÖ ALWAYS implement touch gestures on mobile only
- ‚úÖ ALWAYS provide visual feedback for touch interactions
- ‚ùå NEVER skip touch target requirements
- ‚ùå NEVER implement touch gestures on desktop

### 5. Content Adaptation Rules (MANDATORY)
- ‚úÖ ALWAYS implement responsive margin behavior
- ‚úÖ ALWAYS use proper content width calculations
- ‚úÖ ALWAYS implement smooth transitions
- ‚úÖ ALWAYS maintain proper spacing
- ‚ùå NEVER use fixed margins without responsive behavior
- ‚ùå NEVER skip transition effects

---

## üö® COMPLIANCE ENFORCEMENT

**AI AGENTS MUST:**
1. **Validate layout hierarchy** in every implementation
2. **Check positioning** of Header, Sidebar, and Content
3. **Verify responsive behavior** across all breakpoints
4. **Confirm z-index** values follow the hierarchy
5. **Validate touch interactions** on mobile devices
6. **Ensure content adaptation** works correctly

**NON-COMPLIANCE WILL RESULT IN:**
- ‚ùå Rejection of implementation
- ‚ùå Mandatory correction before proceeding
- ‚ùå Layout structure violation warnings

**THESE LAYOUT RULES ARE NON-NEGOTIABLE AND MUST BE FOLLOWED IN ALL IMPLEMENTATIONS.**