---
description: Innque API schema organization with field definition types (String, Number, Boolean, Date, Array, Pointer, Relation, ACL).
globs:
alwaysApply: false
---

# Schema Structure and Definition

## Overview

This rule defines schema structure and definition patterns for schema-driven React applications. It covers schema organization, field definitions, data types, and schema design best practices.

## Core Principles

- **Dynamic Properties**: Backend provides dynamic properties by default for all schemas
- **Frontend Extensions**: UI-specific properties can be added for dynamic form generation
- **Runtime Flexibility**: Schema changes take effect without code deployment

## Naming Conventions

- **Schema Collections**: Use `snake_case` and prefer single words when possible
  - ‚úÖ `users` instead of `user_profiles`
  - ‚úÖ `logs` instead of `attendance_logs`
  - ‚úÖ `products` instead of `product_catalog`
- **Schema Fields**: Use `snake_case` and prefer single words when possible
  - ‚úÖ `created` instead of `created_at`
  - ‚úÖ `updated` instead of `updated_at` 
  - ‚úÖ `creator` instead of `created_by`
  - ‚úÖ `editor` instead of `edited_by`
- **JavaScript Code**: Use `camelCase` for variables, functions, and objects

## Schema Structure

### Dynamic Properties Concept

The backend automatically provides dynamic properties for all schemas by default. This means:

- **Automatic Field Detection**: Backend can infer field types and properties
- **Default Validation**: Basic validation rules are applied automatically
- **Permission Inheritance**: Access controls are inherited from collection settings
- **Extensible Design**: Frontend can extend schemas with UI-specific properties

### Backend Schema (Default)

The backend provides dynamic properties by default for all schemas:

```json
{
  "collection": "my_collection",
  "fields": {
    "id": {
      "type": "String",
      "default": "${crypto.uuid}",
      "once": true
    },
    "created": {
      "type": "Date",
      "default": "${date.iso}",
      "once": true
    },
    "updated": {
      "type": "Date",
      "value": "${date.iso}"
    },
    "acl": {
      "type": "ACL",
      "default": {
        "read": ["*"],
        "write": ["*"]
      }
    }
  },
  "permissions": {
    "create": ["*"],
    "find": ["*"],
    "update": ["*"],
    "delete": ["role:admin"]
  }
}
```

### Frontend Extended Schema (UI Generation)

Frontend can extend schemas with UI-specific properties for dynamic form generation:

```json
{
  "collection": "my_collection",
  "fields": {
    "field_name": {
      "type": "String",
      "label": "Field Label",
      "required": true,
      "placeholder": "Enter value",
      "tab": "general",
      "section": "basic",
      "col": "w-full md:w-1/2"
    }
  },
  "tabs": {
    "general": {
      "label": "General Information"
    }
  },
  "sections": {
    "basic": {
      "label": "Basic Information"
    }
  },
  "permissions": {
    "create": ["role:admin"],
    "find": ["*"],
    "update": ["role:admin"],
    "delete": ["role:admin"]
  }
}
```

## Schema Property Categories

### Backend Properties (Default)

- `collection` - Collection name
- `fields` - Field definitions with basic properties
- `permissions` - Access control rules

### Permission Conventions

- `role:{name}` - Users with specific role (e.g., `role:admin`)
- `{userID}` - Specific user by ID
- `"*"` - All authenticated users
- `[]` - Master key access only
- `` (empty string) - Public access (no authentication required)

### Frontend Extension Properties (Optional)

- `tabs` - Tab definitions for organizing fields into logical groups with labels and metadata
- `sections` - Section definitions for sub-grouping fields within tabs for better organization

## Supported Data Types

- `String` - Alphanumeric text
- `Number` - Numerical values
- `Boolean` - True or false values
- `Date` - Date and time values
- `Array` - Ordered collections
- `Pointer` - Reference to another collection record
- `Relation` - Many-to-many relationships
- `ACL` - Access Control List

## Field Properties

### Backend Properties (Default)

- `type` - Data type of the field (String, Number, Boolean, etc.)
- `target` - Target collection for Pointer types
- `required` - Whether field is mandatory
- `unique` - Set to true to ensure field value is unique across all records
- `default` - Default value for the field
- `value` - Same as default but always overrides the value (forces update)
- `once` - Set to true to apply default value only on creation (never update)

### Frontend Extension Properties (UI Generation)

- `label` - Display label for the field
- `placeholder` - Placeholder text for input
- `format` - Frontend-specific input type (e.g., "email", "password", "tel", "url", "image")
- `enum` - Array of allowed values for String fields
- `tab` - Tab identifier to assign field to a specific tab group
- `section` - Section identifier to assign field to a specific section within a tab
- `col` - Tailwind column classes for responsive layout

## Dynamic Placeholders

### Date and Time Placeholders

- `${date.iso}` - ISO 8601 format (e.g., `2023-09-15T12:34:56.789Z`)
- `${date.year}` - Current year (e.g., `2023`)
- `${date.month}` - Current month 1-12 (e.g., `9`)
- `${date.day}` - Current day 1-31 (e.g., `15`)
- `${date.hours}` - Current hour 0-23 (e.g., `12`)
- `${date.minutes}` - Current minute 0-59 (e.g., `34`)
- `${date.seconds}` - Current second 0-59 (e.g., `56`)
- `${date.local}` - Local date format (e.g., `09/15/2023`)
- `${date.timestamp}` - Unix timestamp (e.g., `1694780096789`)
- `${date.utc}` - UTC time representation (e.g., `2023-09-15T12:34:56Z`)

### User and Object Context

- `${user.id}` - Current authenticated user ID
- `${user.name}` - Current authenticated user name
- `${user.email}` - Current authenticated user email
- `${object.id}` - ID of the object being processed
- `${object.field_name}` - Value of specific field in current object

### System-Generated Values

- `${crypto.uuid}` - Generate UUID v4
- `${crypto.randomHex}` - Generate random hexadecimal string

---

## üîê Authentication Schema Patterns

### User Authentication Schema (MANDATORY)

#### Users Collection Schema

```json
{
  "collection": "users",
  "fields": {
    "id": {
      "type": "String",
      "default": "${crypto.uuid}",
      "once": true
    },
    "email": {
      "type": "String",
      "required": true,
      "unique": true,
      "label": "Email Address",
      "placeholder": "Enter email address",
      "format": "email"
    },
    "password": {
      "type": "String",
      "required": true,
      "label": "Password",
      "placeholder": "Enter password",
      "format": "password"
    },
    "firstName": {
      "type": "String",
      "required": true,
      "label": "First Name",
      "placeholder": "Enter first name",
      "format": "text"
    },
    "lastName": {
      "type": "String",
      "required": true,
      "label": "Last Name",
      "placeholder": "Enter last name",
      "format": "text"
    },
    "role": {
      "type": "Pointer",
      "target": "roles",
      "label": "Role",
      "placeholder": "Select role"
    },
    "status": {
      "type": "String",
      "default": "active",
      "enum": ["active", "inactive", "suspended"],
      "label": "Status"
    },
    "source": {
      "type": "String",
      "default": "registration",
      "enum": ["registration", "admin", "import"],
      "label": "Source"
    },
    "lastLogin": {
      "type": "Date",
      "label": "Last Login"
    },
    "created": {
      "type": "Date",
      "default": "${date.iso}",
      "once": true
    },
    "updated": {
      "type": "Date",
      "value": "${date.iso}"
    },
    "acl": {
      "type": "ACL",
      "default": {
        "read": ["*"],
        "write": ["${user.id}"]
      }
    }
  },
  "permissions": {
    "create": ["*"],
    "find": ["*"],
    "update": ["${user.id}", "role:admin"],
    "delete": ["role:admin"]
  }
}
```

#### Roles Collection Schema

```json
{
  "collection": "roles",
  "fields": {
    "id": {
      "type": "String",
      "default": "${crypto.uuid}",
      "once": true
    },
    "name": {
      "type": "String",
      "required": true,
      "unique": true,
      "label": "Role Name",
      "placeholder": "Enter role name",
      "format": "text"
    },
    "description": {
      "type": "String",
      "label": "Description",
      "placeholder": "Enter role description",
      "format": "textarea"
    },
    "permissions": {
      "type": "Array",
      "label": "Permissions",
      "enum": ["read", "write", "delete", "admin"]
    },
    "isActive": {
      "type": "Boolean",
      "default": true,
      "label": "Active"
    },
    "created": {
      "type": "Date",
      "default": "${date.iso}",
      "once": true
    },
    "updated": {
      "type": "Date",
      "value": "${date.iso}"
    },
    "acl": {
      "type": "ACL",
      "default": {
        "read": ["*"],
        "write": ["role:admin"]
      }
    }
  },
  "permissions": {
    "create": ["role:admin"],
    "find": ["*"],
    "update": ["role:admin"],
    "delete": ["role:admin"]
  }
}
```

### Authentication Schema Rules (MANDATORY)

#### User Schema Requirements

- **Email**: Must be unique, required, valid email format (primary authentication field)
- **Password**: Must be required, stored as MD5 hash
- **Role**: Pointer to roles collection, required for authorization
- **Status**: Enum with values: active, inactive, suspended
- **Source**: Track how user was created (registration, admin, import)
- **ACL**: User can read all, write only their own record

#### Role Schema Requirements

- **Name**: Must be unique, required, descriptive role name
- **Permissions**: Array of permission strings (read, write, delete, admin)
- **IsActive**: Boolean to enable/disable roles
- **ACL**: Only admins can manage roles

#### Authentication Field Conventions

```javascript
// Password Hashing (MANDATORY)
// Passwords MUST be hashed using MD5 before storage
import { MD5 } from 'crypto-js';
// See @rest-api-implementation.mdc for password hashing implementation

// Email Validation (MANDATORY)
// Emails MUST be lowercase and valid format (primary authentication field)
const validEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email.toLowerCase());

// Role Pointer Format (MANDATORY)
// Role field MUST use Pointer type with target "roles"
{
  "role": {
    "type": "Pointer",
    "target": "roles",
    "required": true
  }
}

// Status Enum Values (MANDATORY)
// Status field MUST use these exact enum values
{
  "status": {
    "type": "String",
    "default": "active",
    "enum": ["active", "inactive", "suspended"]
  }
}
```

### Authentication Schema Validation

#### User Creation Validation

```javascript
// Required fields validation
const requiredFields = ['email', 'password', 'firstName', 'lastName'];
const missingFields = requiredFields.filter(field => !userData[field]);
if (missingFields.length > 0) {
  throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
}

// Email format validation (primary authentication field)
if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(userData.email)) {
  throw new Error('Invalid email format');
}

// Password strength validation
if (userData.password.length < 6) {
  throw new Error('Password must be at least 6 characters long');
}
```

#### Role Assignment Validation

```javascript
// Role existence validation
const roleExists = await findObjects('roles', {
  where: { id: userData.role },
  limit: 1
});

if (!roleExists || roleExists.length === 0) {
  throw new Error('Invalid role selected');
}

// Role active status validation
if (!roleExists[0].isActive) {
  throw new Error('Selected role is not active');
}
```

### Authentication Error Handling

#### Common Authentication Errors

```javascript
// User not found
if (!user) {
  throw new Error('Invalid credentials. Please check your email and password.');
}

// Account inactive
if (user.status !== 'active') {
  throw new Error('Account is not active. Please contact support.');
}

// Password mismatch
if (user.password !== hashedPassword) {
  throw new Error('Invalid credentials. Please check your email and password.');
}

// Email already exists
if (existingEmail) {
  throw new Error('Email address is already registered. Please use a different email.');
}
```

#### Authentication Error Response Format

```javascript
// Standard error response format
{
  "error": true,
  "message": "User-friendly error message",
  "code": "AUTH_ERROR_CODE",
  "details": {
    "field": "fieldName",
    "value": "invalidValue"
  }
}

// Common error codes
const AUTH_ERROR_CODES = {
  INVALID_CREDENTIALS: 'INVALID_CREDENTIALS',
  ACCOUNT_INACTIVE: 'ACCOUNT_INACTIVE',
  EMAIL_EXISTS: 'EMAIL_EXISTS',
  INVALID_ROLE: 'INVALID_ROLE',
  PASSWORD_TOO_WEAK: 'PASSWORD_TOO_WEAK',
  SESSION_EXPIRED: 'SESSION_EXPIRED'
};
```


